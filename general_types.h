/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef general_TYPES_H
#define general_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace general {

class Variant;

class MethodArgument;

class MethodDescription;

class ByteCodeObject;

class APIResponse;

typedef struct _Variant__isset {
  _Variant__isset() : v_null(false), v_boolean(false), v_boolean_box(false), v_byte(false), v_byte_box(false), v_short(false), v_short_box(false), v_int(false), v_int_box(false), v_long(false), v_long_box(false), v_float(false), v_float_box(false), v_double(false), v_double_box(false), v_string(false), v_list(false), v_set(false), v_map(false), v_array(false) {}
  bool v_null :1;
  bool v_boolean :1;
  bool v_boolean_box :1;
  bool v_byte :1;
  bool v_byte_box :1;
  bool v_short :1;
  bool v_short_box :1;
  bool v_int :1;
  bool v_int_box :1;
  bool v_long :1;
  bool v_long_box :1;
  bool v_float :1;
  bool v_float_box :1;
  bool v_double :1;
  bool v_double_box :1;
  bool v_string :1;
  bool v_list :1;
  bool v_set :1;
  bool v_map :1;
  bool v_array :1;
} _Variant__isset;

class Variant : public virtual ::apache::thrift::TBase {
 public:

  Variant(const Variant&);
  Variant(Variant&&);
  Variant& operator=(const Variant&);
  Variant& operator=(Variant&&);
  Variant() : v_null(0), v_boolean(0), v_boolean_box(0), v_byte(0), v_byte_box(0), v_short(0), v_short_box(0), v_int(0), v_int_box(0), v_long(0), v_long_box(0), v_float(0), v_float_box(0), v_double(0), v_double_box(0), v_string() {
  }

  virtual ~Variant() throw();
  int8_t v_null;
  bool v_boolean;
  bool v_boolean_box;
  int8_t v_byte;
  int8_t v_byte_box;
  int16_t v_short;
  int16_t v_short_box;
  int32_t v_int;
  int32_t v_int_box;
  int64_t v_long;
  int64_t v_long_box;
  double v_float;
  double v_float_box;
  double v_double;
  double v_double_box;
  std::string v_string;
  std::vector<Variant>  v_list;
  std::set<Variant>  v_set;
  std::map<Variant, Variant>  v_map;
  std::vector<Variant>  v_array;

  _Variant__isset __isset;

  void __set_v_null(const int8_t val);

  void __set_v_boolean(const bool val);

  void __set_v_boolean_box(const bool val);

  void __set_v_byte(const int8_t val);

  void __set_v_byte_box(const int8_t val);

  void __set_v_short(const int16_t val);

  void __set_v_short_box(const int16_t val);

  void __set_v_int(const int32_t val);

  void __set_v_int_box(const int32_t val);

  void __set_v_long(const int64_t val);

  void __set_v_long_box(const int64_t val);

  void __set_v_float(const double val);

  void __set_v_float_box(const double val);

  void __set_v_double(const double val);

  void __set_v_double_box(const double val);

  void __set_v_string(const std::string& val);

  void __set_v_list(const std::vector<Variant> & val);

  void __set_v_set(const std::set<Variant> & val);

  void __set_v_map(const std::map<Variant, Variant> & val);

  void __set_v_array(const std::vector<Variant> & val);

  bool operator == (const Variant & rhs) const
  {
    if (__isset.v_null != rhs.__isset.v_null)
      return false;
    else if (__isset.v_null && !(v_null == rhs.v_null))
      return false;
    if (__isset.v_boolean != rhs.__isset.v_boolean)
      return false;
    else if (__isset.v_boolean && !(v_boolean == rhs.v_boolean))
      return false;
    if (__isset.v_boolean_box != rhs.__isset.v_boolean_box)
      return false;
    else if (__isset.v_boolean_box && !(v_boolean_box == rhs.v_boolean_box))
      return false;
    if (__isset.v_byte != rhs.__isset.v_byte)
      return false;
    else if (__isset.v_byte && !(v_byte == rhs.v_byte))
      return false;
    if (__isset.v_byte_box != rhs.__isset.v_byte_box)
      return false;
    else if (__isset.v_byte_box && !(v_byte_box == rhs.v_byte_box))
      return false;
    if (__isset.v_short != rhs.__isset.v_short)
      return false;
    else if (__isset.v_short && !(v_short == rhs.v_short))
      return false;
    if (__isset.v_short_box != rhs.__isset.v_short_box)
      return false;
    else if (__isset.v_short_box && !(v_short_box == rhs.v_short_box))
      return false;
    if (__isset.v_int != rhs.__isset.v_int)
      return false;
    else if (__isset.v_int && !(v_int == rhs.v_int))
      return false;
    if (__isset.v_int_box != rhs.__isset.v_int_box)
      return false;
    else if (__isset.v_int_box && !(v_int_box == rhs.v_int_box))
      return false;
    if (__isset.v_long != rhs.__isset.v_long)
      return false;
    else if (__isset.v_long && !(v_long == rhs.v_long))
      return false;
    if (__isset.v_long_box != rhs.__isset.v_long_box)
      return false;
    else if (__isset.v_long_box && !(v_long_box == rhs.v_long_box))
      return false;
    if (__isset.v_float != rhs.__isset.v_float)
      return false;
    else if (__isset.v_float && !(v_float == rhs.v_float))
      return false;
    if (__isset.v_float_box != rhs.__isset.v_float_box)
      return false;
    else if (__isset.v_float_box && !(v_float_box == rhs.v_float_box))
      return false;
    if (__isset.v_double != rhs.__isset.v_double)
      return false;
    else if (__isset.v_double && !(v_double == rhs.v_double))
      return false;
    if (__isset.v_double_box != rhs.__isset.v_double_box)
      return false;
    else if (__isset.v_double_box && !(v_double_box == rhs.v_double_box))
      return false;
    if (__isset.v_string != rhs.__isset.v_string)
      return false;
    else if (__isset.v_string && !(v_string == rhs.v_string))
      return false;
    if (__isset.v_list != rhs.__isset.v_list)
      return false;
    else if (__isset.v_list && !(v_list == rhs.v_list))
      return false;
    if (__isset.v_set != rhs.__isset.v_set)
      return false;
    else if (__isset.v_set && !(v_set == rhs.v_set))
      return false;
    if (__isset.v_map != rhs.__isset.v_map)
      return false;
    else if (__isset.v_map && !(v_map == rhs.v_map))
      return false;
    if (__isset.v_array != rhs.__isset.v_array)
      return false;
    else if (__isset.v_array && !(v_array == rhs.v_array))
      return false;
    return true;
  }
  bool operator != (const Variant &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Variant & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Variant &a, Variant &b);

std::ostream& operator<<(std::ostream& out, const Variant& obj);

typedef struct _MethodArgument__isset {
  _MethodArgument__isset() : type(false), name(false) {}
  bool type :1;
  bool name :1;
} _MethodArgument__isset;

class MethodArgument : public virtual ::apache::thrift::TBase {
 public:

  MethodArgument(const MethodArgument&);
  MethodArgument(MethodArgument&&);
  MethodArgument& operator=(const MethodArgument&);
  MethodArgument& operator=(MethodArgument&&);
  MethodArgument() : type(), name() {
  }

  virtual ~MethodArgument() throw();
  std::string type;
  std::string name;

  _MethodArgument__isset __isset;

  void __set_type(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const MethodArgument & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const MethodArgument &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MethodArgument & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MethodArgument &a, MethodArgument &b);

std::ostream& operator<<(std::ostream& out, const MethodArgument& obj);

typedef struct _MethodDescription__isset {
  _MethodDescription__isset() : returnType(false), name(false), arguments(false) {}
  bool returnType :1;
  bool name :1;
  bool arguments :1;
} _MethodDescription__isset;

class MethodDescription : public virtual ::apache::thrift::TBase {
 public:

  MethodDescription(const MethodDescription&);
  MethodDescription(MethodDescription&&);
  MethodDescription& operator=(const MethodDescription&);
  MethodDescription& operator=(MethodDescription&&);
  MethodDescription() : returnType(), name() {
  }

  virtual ~MethodDescription() throw();
  std::string returnType;
  std::string name;
  std::vector<MethodArgument>  arguments;

  _MethodDescription__isset __isset;

  void __set_returnType(const std::string& val);

  void __set_name(const std::string& val);

  void __set_arguments(const std::vector<MethodArgument> & val);

  bool operator == (const MethodDescription & rhs) const
  {
    if (!(returnType == rhs.returnType))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const MethodDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MethodDescription & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MethodDescription &a, MethodDescription &b);

std::ostream& operator<<(std::ostream& out, const MethodDescription& obj);

typedef struct _ByteCodeObject__isset {
  _ByteCodeObject__isset() : name(false), byteCode(false) {}
  bool name :1;
  bool byteCode :1;
} _ByteCodeObject__isset;

class ByteCodeObject : public virtual ::apache::thrift::TBase {
 public:

  ByteCodeObject(const ByteCodeObject&);
  ByteCodeObject(ByteCodeObject&&);
  ByteCodeObject& operator=(const ByteCodeObject&);
  ByteCodeObject& operator=(ByteCodeObject&&);
  ByteCodeObject() : name(), byteCode() {
  }

  virtual ~ByteCodeObject() throw();
  std::string name;
  std::string byteCode;

  _ByteCodeObject__isset __isset;

  void __set_name(const std::string& val);

  void __set_byteCode(const std::string& val);

  bool operator == (const ByteCodeObject & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(byteCode == rhs.byteCode))
      return false;
    return true;
  }
  bool operator != (const ByteCodeObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ByteCodeObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ByteCodeObject &a, ByteCodeObject &b);

std::ostream& operator<<(std::ostream& out, const ByteCodeObject& obj);

typedef struct _APIResponse__isset {
  _APIResponse__isset() : code(false), message(false) {}
  bool code :1;
  bool message :1;
} _APIResponse__isset;

class APIResponse : public virtual ::apache::thrift::TBase {
 public:

  APIResponse(const APIResponse&);
  APIResponse(APIResponse&&);
  APIResponse& operator=(const APIResponse&);
  APIResponse& operator=(APIResponse&&);
  APIResponse() : code(0), message() {
  }

  virtual ~APIResponse() throw();
  int8_t code;
  std::string message;

  _APIResponse__isset __isset;

  void __set_code(const int8_t val);

  void __set_message(const std::string& val);

  bool operator == (const APIResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const APIResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(APIResponse &a, APIResponse &b);

std::ostream& operator<<(std::ostream& out, const APIResponse& obj);

} // namespace

#endif
