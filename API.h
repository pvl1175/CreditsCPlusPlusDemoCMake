/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef API_H
#define API_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "api_types.h"

namespace api {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class APIIf {
 public:
  virtual ~APIIf() {}
  virtual void WalletDataGet(WalletDataGetResult& _return, const Address& address) = 0;
  virtual void WalletIdGet(WalletIdGetResult& _return, const Address& address) = 0;
  virtual void WalletTransactionsCountGet(WalletTransactionsCountGetResult& _return, const Address& address) = 0;
  virtual void WalletBalanceGet(WalletBalanceGetResult& _return, const Address& address) = 0;
  virtual void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId) = 0;
  virtual void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit) = 0;
  virtual void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction) = 0;
  virtual void TransactionsListGet(TransactionsGetResult& _return, const int64_t offset, const int64_t limit) = 0;
  virtual void GetLastHash(PoolHash& _return) = 0;
  virtual void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit) = 0;
  virtual void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit) = 0;
  virtual void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index) = 0;
  virtual void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit) = 0;
  virtual void StatsGet(StatsGetResult& _return) = 0;
  virtual void SmartContractGet(SmartContractGetResult& _return, const Address& address) = 0;
  virtual void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer) = 0;
  virtual void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer) = 0;
  virtual void WaitForBlock(PoolHash& _return, const PoolHash& obsolete) = 0;
  virtual void WaitForSmartTransaction(TransactionId& _return, const Address& smart_public) = 0;
  virtual void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit) = 0;
  virtual void TransactionsStateGet(TransactionsStateGetResult& _return, const Address& address, const std::vector<TransactionInnerId> & id) = 0;
  virtual void ContractAllMethodsGet(ContractAllMethodsGetResult& _return, const std::vector< ::general::ByteCodeObject> & byteCodeObjects) = 0;
  virtual void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const TransactionInnerId id) = 0;
  virtual void SmartContractDataGet(SmartContractDataResult& _return, const Address& address) = 0;
  virtual void SmartContractCompile(SmartContractCompileResult& _return, const std::string& sourceCode) = 0;
  virtual void TokenBalancesGet(TokenBalancesResult& _return, const Address& address) = 0;
  virtual void TokenTransfersGet(TokenTransfersResult& _return, const Address& token, const int64_t offset, const int64_t limit) = 0;
  virtual void TokenTransferGet(TokenTransfersResult& _return, const Address& token, const TransactionId& id) = 0;
  virtual void TokenTransfersListGet(TokenTransfersResult& _return, const int64_t offset, const int64_t limit) = 0;
  virtual void TokenWalletTransfersGet(TokenTransfersResult& _return, const Address& token, const Address& address, const int64_t offset, const int64_t limit) = 0;
  virtual void TokenTransactionsGet(TokenTransactionsResult& _return, const Address& token, const int64_t offset, const int64_t limit) = 0;
  virtual void TokenInfoGet(TokenInfoResult& _return, const Address& token) = 0;
  virtual void TokenHoldersGet(TokenHoldersResult& _return, const Address& token, const int64_t offset, const int64_t limit, const TokenHoldersSortField order, const bool desc) = 0;
  virtual void TokensListGet(TokensListResult& _return, const int64_t offset, const int64_t limit, const TokensListSortField order, const bool desc) = 0;
  virtual void WalletsGet(WalletsGetResult& _return, const int64_t offset, const int64_t limit, const int8_t ordCol, const bool desc) = 0;
  virtual void TrustedGet(TrustedGetResult& _return, const int32_t page) = 0;
  virtual void SyncStateGet(SyncStateResult& _return) = 0;
  virtual void GetSeed(GetSeedResult& _return, const AccessID accessId) = 0;
  virtual void GetSmartCode(GetSmartCodeResult& _return, const AccessID accessId, const Address& address) = 0;
};

class APIIfFactory {
 public:
  typedef APIIf Handler;

  virtual ~APIIfFactory() {}

  virtual APIIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(APIIf* /* handler */) = 0;
};

class APIIfSingletonFactory : virtual public APIIfFactory {
 public:
  APIIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<APIIf>& iface) : iface_(iface) {}
  virtual ~APIIfSingletonFactory() {}

  virtual APIIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(APIIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<APIIf> iface_;
};

class APINull : virtual public APIIf {
 public:
  virtual ~APINull() {}
  void WalletDataGet(WalletDataGetResult& /* _return */, const Address& /* address */) {
    return;
  }
  void WalletIdGet(WalletIdGetResult& /* _return */, const Address& /* address */) {
    return;
  }
  void WalletTransactionsCountGet(WalletTransactionsCountGetResult& /* _return */, const Address& /* address */) {
    return;
  }
  void WalletBalanceGet(WalletBalanceGetResult& /* _return */, const Address& /* address */) {
    return;
  }
  void TransactionGet(TransactionGetResult& /* _return */, const TransactionId& /* transactionId */) {
    return;
  }
  void TransactionsGet(TransactionsGetResult& /* _return */, const Address& /* address */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void TransactionFlow(TransactionFlowResult& /* _return */, const Transaction& /* transaction */) {
    return;
  }
  void TransactionsListGet(TransactionsGetResult& /* _return */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void GetLastHash(PoolHash& /* _return */) {
    return;
  }
  void PoolListGetStable(PoolListGetResult& /* _return */, const PoolHash& /* hash */, const int64_t /* limit */) {
    return;
  }
  void PoolListGet(PoolListGetResult& /* _return */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void PoolInfoGet(PoolInfoGetResult& /* _return */, const PoolHash& /* hash */, const int64_t /* index */) {
    return;
  }
  void PoolTransactionsGet(PoolTransactionsGetResult& /* _return */, const PoolHash& /* hash */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void StatsGet(StatsGetResult& /* _return */) {
    return;
  }
  void SmartContractGet(SmartContractGetResult& /* _return */, const Address& /* address */) {
    return;
  }
  void SmartContractsListGet(SmartContractsListGetResult& /* _return */, const Address& /* deployer */) {
    return;
  }
  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& /* _return */, const Address& /* deployer */) {
    return;
  }
  void WaitForBlock(PoolHash& /* _return */, const PoolHash& /* obsolete */) {
    return;
  }
  void WaitForSmartTransaction(TransactionId& /* _return */, const Address& /* smart_public */) {
    return;
  }
  void SmartContractsAllListGet(SmartContractsListGetResult& /* _return */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void TransactionsStateGet(TransactionsStateGetResult& /* _return */, const Address& /* address */, const std::vector<TransactionInnerId> & /* id */) {
    return;
  }
  void ContractAllMethodsGet(ContractAllMethodsGetResult& /* _return */, const std::vector< ::general::ByteCodeObject> & /* byteCodeObjects */) {
    return;
  }
  void SmartMethodParamsGet(SmartMethodParamsGetResult& /* _return */, const Address& /* address */, const TransactionInnerId /* id */) {
    return;
  }
  void SmartContractDataGet(SmartContractDataResult& /* _return */, const Address& /* address */) {
    return;
  }
  void SmartContractCompile(SmartContractCompileResult& /* _return */, const std::string& /* sourceCode */) {
    return;
  }
  void TokenBalancesGet(TokenBalancesResult& /* _return */, const Address& /* address */) {
    return;
  }
  void TokenTransfersGet(TokenTransfersResult& /* _return */, const Address& /* token */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void TokenTransferGet(TokenTransfersResult& /* _return */, const Address& /* token */, const TransactionId& /* id */) {
    return;
  }
  void TokenTransfersListGet(TokenTransfersResult& /* _return */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void TokenWalletTransfersGet(TokenTransfersResult& /* _return */, const Address& /* token */, const Address& /* address */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void TokenTransactionsGet(TokenTransactionsResult& /* _return */, const Address& /* token */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void TokenInfoGet(TokenInfoResult& /* _return */, const Address& /* token */) {
    return;
  }
  void TokenHoldersGet(TokenHoldersResult& /* _return */, const Address& /* token */, const int64_t /* offset */, const int64_t /* limit */, const TokenHoldersSortField /* order */, const bool /* desc */) {
    return;
  }
  void TokensListGet(TokensListResult& /* _return */, const int64_t /* offset */, const int64_t /* limit */, const TokensListSortField /* order */, const bool /* desc */) {
    return;
  }
  void WalletsGet(WalletsGetResult& /* _return */, const int64_t /* offset */, const int64_t /* limit */, const int8_t /* ordCol */, const bool /* desc */) {
    return;
  }
  void TrustedGet(TrustedGetResult& /* _return */, const int32_t /* page */) {
    return;
  }
  void SyncStateGet(SyncStateResult& /* _return */) {
    return;
  }
  void GetSeed(GetSeedResult& /* _return */, const AccessID /* accessId */) {
    return;
  }
  void GetSmartCode(GetSmartCodeResult& /* _return */, const AccessID /* accessId */, const Address& /* address */) {
    return;
  }
};

typedef struct _API_WalletDataGet_args__isset {
  _API_WalletDataGet_args__isset() : address(false) {}
  bool address :1;
} _API_WalletDataGet_args__isset;

class API_WalletDataGet_args {
 public:

  API_WalletDataGet_args(const API_WalletDataGet_args&);
  API_WalletDataGet_args(API_WalletDataGet_args&&);
  API_WalletDataGet_args& operator=(const API_WalletDataGet_args&);
  API_WalletDataGet_args& operator=(API_WalletDataGet_args&&);
  API_WalletDataGet_args() : address() {
  }

  virtual ~API_WalletDataGet_args() throw();
  Address address;

  _API_WalletDataGet_args__isset __isset;

  void __set_address(const Address& val);

  bool operator == (const API_WalletDataGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_WalletDataGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletDataGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WalletDataGet_pargs {
 public:


  virtual ~API_WalletDataGet_pargs() throw();
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletDataGet_result__isset {
  _API_WalletDataGet_result__isset() : success(false) {}
  bool success :1;
} _API_WalletDataGet_result__isset;

class API_WalletDataGet_result {
 public:

  API_WalletDataGet_result(const API_WalletDataGet_result&);
  API_WalletDataGet_result(API_WalletDataGet_result&&);
  API_WalletDataGet_result& operator=(const API_WalletDataGet_result&);
  API_WalletDataGet_result& operator=(API_WalletDataGet_result&&);
  API_WalletDataGet_result() {
  }

  virtual ~API_WalletDataGet_result() throw();
  WalletDataGetResult success;

  _API_WalletDataGet_result__isset __isset;

  void __set_success(const WalletDataGetResult& val);

  bool operator == (const API_WalletDataGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WalletDataGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletDataGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletDataGet_presult__isset {
  _API_WalletDataGet_presult__isset() : success(false) {}
  bool success :1;
} _API_WalletDataGet_presult__isset;

class API_WalletDataGet_presult {
 public:


  virtual ~API_WalletDataGet_presult() throw();
  WalletDataGetResult* success;

  _API_WalletDataGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_WalletIdGet_args__isset {
  _API_WalletIdGet_args__isset() : address(false) {}
  bool address :1;
} _API_WalletIdGet_args__isset;

class API_WalletIdGet_args {
 public:

  API_WalletIdGet_args(const API_WalletIdGet_args&);
  API_WalletIdGet_args(API_WalletIdGet_args&&);
  API_WalletIdGet_args& operator=(const API_WalletIdGet_args&);
  API_WalletIdGet_args& operator=(API_WalletIdGet_args&&);
  API_WalletIdGet_args() : address() {
  }

  virtual ~API_WalletIdGet_args() throw();
  Address address;

  _API_WalletIdGet_args__isset __isset;

  void __set_address(const Address& val);

  bool operator == (const API_WalletIdGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_WalletIdGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletIdGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WalletIdGet_pargs {
 public:


  virtual ~API_WalletIdGet_pargs() throw();
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletIdGet_result__isset {
  _API_WalletIdGet_result__isset() : success(false) {}
  bool success :1;
} _API_WalletIdGet_result__isset;

class API_WalletIdGet_result {
 public:

  API_WalletIdGet_result(const API_WalletIdGet_result&);
  API_WalletIdGet_result(API_WalletIdGet_result&&);
  API_WalletIdGet_result& operator=(const API_WalletIdGet_result&);
  API_WalletIdGet_result& operator=(API_WalletIdGet_result&&);
  API_WalletIdGet_result() {
  }

  virtual ~API_WalletIdGet_result() throw();
  WalletIdGetResult success;

  _API_WalletIdGet_result__isset __isset;

  void __set_success(const WalletIdGetResult& val);

  bool operator == (const API_WalletIdGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WalletIdGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletIdGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletIdGet_presult__isset {
  _API_WalletIdGet_presult__isset() : success(false) {}
  bool success :1;
} _API_WalletIdGet_presult__isset;

class API_WalletIdGet_presult {
 public:


  virtual ~API_WalletIdGet_presult() throw();
  WalletIdGetResult* success;

  _API_WalletIdGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_WalletTransactionsCountGet_args__isset {
  _API_WalletTransactionsCountGet_args__isset() : address(false) {}
  bool address :1;
} _API_WalletTransactionsCountGet_args__isset;

class API_WalletTransactionsCountGet_args {
 public:

  API_WalletTransactionsCountGet_args(const API_WalletTransactionsCountGet_args&);
  API_WalletTransactionsCountGet_args(API_WalletTransactionsCountGet_args&&);
  API_WalletTransactionsCountGet_args& operator=(const API_WalletTransactionsCountGet_args&);
  API_WalletTransactionsCountGet_args& operator=(API_WalletTransactionsCountGet_args&&);
  API_WalletTransactionsCountGet_args() : address() {
  }

  virtual ~API_WalletTransactionsCountGet_args() throw();
  Address address;

  _API_WalletTransactionsCountGet_args__isset __isset;

  void __set_address(const Address& val);

  bool operator == (const API_WalletTransactionsCountGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_WalletTransactionsCountGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletTransactionsCountGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WalletTransactionsCountGet_pargs {
 public:


  virtual ~API_WalletTransactionsCountGet_pargs() throw();
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletTransactionsCountGet_result__isset {
  _API_WalletTransactionsCountGet_result__isset() : success(false) {}
  bool success :1;
} _API_WalletTransactionsCountGet_result__isset;

class API_WalletTransactionsCountGet_result {
 public:

  API_WalletTransactionsCountGet_result(const API_WalletTransactionsCountGet_result&);
  API_WalletTransactionsCountGet_result(API_WalletTransactionsCountGet_result&&);
  API_WalletTransactionsCountGet_result& operator=(const API_WalletTransactionsCountGet_result&);
  API_WalletTransactionsCountGet_result& operator=(API_WalletTransactionsCountGet_result&&);
  API_WalletTransactionsCountGet_result() {
  }

  virtual ~API_WalletTransactionsCountGet_result() throw();
  WalletTransactionsCountGetResult success;

  _API_WalletTransactionsCountGet_result__isset __isset;

  void __set_success(const WalletTransactionsCountGetResult& val);

  bool operator == (const API_WalletTransactionsCountGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WalletTransactionsCountGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletTransactionsCountGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletTransactionsCountGet_presult__isset {
  _API_WalletTransactionsCountGet_presult__isset() : success(false) {}
  bool success :1;
} _API_WalletTransactionsCountGet_presult__isset;

class API_WalletTransactionsCountGet_presult {
 public:


  virtual ~API_WalletTransactionsCountGet_presult() throw();
  WalletTransactionsCountGetResult* success;

  _API_WalletTransactionsCountGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_WalletBalanceGet_args__isset {
  _API_WalletBalanceGet_args__isset() : address(false) {}
  bool address :1;
} _API_WalletBalanceGet_args__isset;

class API_WalletBalanceGet_args {
 public:

  API_WalletBalanceGet_args(const API_WalletBalanceGet_args&);
  API_WalletBalanceGet_args(API_WalletBalanceGet_args&&);
  API_WalletBalanceGet_args& operator=(const API_WalletBalanceGet_args&);
  API_WalletBalanceGet_args& operator=(API_WalletBalanceGet_args&&);
  API_WalletBalanceGet_args() : address() {
  }

  virtual ~API_WalletBalanceGet_args() throw();
  Address address;

  _API_WalletBalanceGet_args__isset __isset;

  void __set_address(const Address& val);

  bool operator == (const API_WalletBalanceGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_WalletBalanceGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletBalanceGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WalletBalanceGet_pargs {
 public:


  virtual ~API_WalletBalanceGet_pargs() throw();
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletBalanceGet_result__isset {
  _API_WalletBalanceGet_result__isset() : success(false) {}
  bool success :1;
} _API_WalletBalanceGet_result__isset;

class API_WalletBalanceGet_result {
 public:

  API_WalletBalanceGet_result(const API_WalletBalanceGet_result&);
  API_WalletBalanceGet_result(API_WalletBalanceGet_result&&);
  API_WalletBalanceGet_result& operator=(const API_WalletBalanceGet_result&);
  API_WalletBalanceGet_result& operator=(API_WalletBalanceGet_result&&);
  API_WalletBalanceGet_result() {
  }

  virtual ~API_WalletBalanceGet_result() throw();
  WalletBalanceGetResult success;

  _API_WalletBalanceGet_result__isset __isset;

  void __set_success(const WalletBalanceGetResult& val);

  bool operator == (const API_WalletBalanceGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WalletBalanceGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletBalanceGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletBalanceGet_presult__isset {
  _API_WalletBalanceGet_presult__isset() : success(false) {}
  bool success :1;
} _API_WalletBalanceGet_presult__isset;

class API_WalletBalanceGet_presult {
 public:


  virtual ~API_WalletBalanceGet_presult() throw();
  WalletBalanceGetResult* success;

  _API_WalletBalanceGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TransactionGet_args__isset {
  _API_TransactionGet_args__isset() : transactionId(false) {}
  bool transactionId :1;
} _API_TransactionGet_args__isset;

class API_TransactionGet_args {
 public:

  API_TransactionGet_args(const API_TransactionGet_args&);
  API_TransactionGet_args(API_TransactionGet_args&&);
  API_TransactionGet_args& operator=(const API_TransactionGet_args&);
  API_TransactionGet_args& operator=(API_TransactionGet_args&&);
  API_TransactionGet_args() {
  }

  virtual ~API_TransactionGet_args() throw();
  TransactionId transactionId;

  _API_TransactionGet_args__isset __isset;

  void __set_transactionId(const TransactionId& val);

  bool operator == (const API_TransactionGet_args & rhs) const
  {
    if (!(transactionId == rhs.transactionId))
      return false;
    return true;
  }
  bool operator != (const API_TransactionGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TransactionGet_pargs {
 public:


  virtual ~API_TransactionGet_pargs() throw();
  const TransactionId* transactionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionGet_result__isset {
  _API_TransactionGet_result__isset() : success(false) {}
  bool success :1;
} _API_TransactionGet_result__isset;

class API_TransactionGet_result {
 public:

  API_TransactionGet_result(const API_TransactionGet_result&);
  API_TransactionGet_result(API_TransactionGet_result&&);
  API_TransactionGet_result& operator=(const API_TransactionGet_result&);
  API_TransactionGet_result& operator=(API_TransactionGet_result&&);
  API_TransactionGet_result() {
  }

  virtual ~API_TransactionGet_result() throw();
  TransactionGetResult success;

  _API_TransactionGet_result__isset __isset;

  void __set_success(const TransactionGetResult& val);

  bool operator == (const API_TransactionGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TransactionGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionGet_presult__isset {
  _API_TransactionGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TransactionGet_presult__isset;

class API_TransactionGet_presult {
 public:


  virtual ~API_TransactionGet_presult() throw();
  TransactionGetResult* success;

  _API_TransactionGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TransactionsGet_args__isset {
  _API_TransactionsGet_args__isset() : address(false), offset(false), limit(false) {}
  bool address :1;
  bool offset :1;
  bool limit :1;
} _API_TransactionsGet_args__isset;

class API_TransactionsGet_args {
 public:

  API_TransactionsGet_args(const API_TransactionsGet_args&);
  API_TransactionsGet_args(API_TransactionsGet_args&&);
  API_TransactionsGet_args& operator=(const API_TransactionsGet_args&);
  API_TransactionsGet_args& operator=(API_TransactionsGet_args&&);
  API_TransactionsGet_args() : address(), offset(0), limit(0) {
  }

  virtual ~API_TransactionsGet_args() throw();
  Address address;
  int64_t offset;
  int64_t limit;

  _API_TransactionsGet_args__isset __isset;

  void __set_address(const Address& val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_TransactionsGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_TransactionsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TransactionsGet_pargs {
 public:


  virtual ~API_TransactionsGet_pargs() throw();
  const Address* address;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionsGet_result__isset {
  _API_TransactionsGet_result__isset() : success(false) {}
  bool success :1;
} _API_TransactionsGet_result__isset;

class API_TransactionsGet_result {
 public:

  API_TransactionsGet_result(const API_TransactionsGet_result&);
  API_TransactionsGet_result(API_TransactionsGet_result&&);
  API_TransactionsGet_result& operator=(const API_TransactionsGet_result&);
  API_TransactionsGet_result& operator=(API_TransactionsGet_result&&);
  API_TransactionsGet_result() {
  }

  virtual ~API_TransactionsGet_result() throw();
  TransactionsGetResult success;

  _API_TransactionsGet_result__isset __isset;

  void __set_success(const TransactionsGetResult& val);

  bool operator == (const API_TransactionsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TransactionsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionsGet_presult__isset {
  _API_TransactionsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TransactionsGet_presult__isset;

class API_TransactionsGet_presult {
 public:


  virtual ~API_TransactionsGet_presult() throw();
  TransactionsGetResult* success;

  _API_TransactionsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TransactionFlow_args__isset {
  _API_TransactionFlow_args__isset() : transaction(false) {}
  bool transaction :1;
} _API_TransactionFlow_args__isset;

class API_TransactionFlow_args {
 public:

  API_TransactionFlow_args(const API_TransactionFlow_args&);
  API_TransactionFlow_args(API_TransactionFlow_args&&);
  API_TransactionFlow_args& operator=(const API_TransactionFlow_args&);
  API_TransactionFlow_args& operator=(API_TransactionFlow_args&&);
  API_TransactionFlow_args() {
  }

  virtual ~API_TransactionFlow_args() throw();
  Transaction transaction;

  _API_TransactionFlow_args__isset __isset;

  void __set_transaction(const Transaction& val);

  bool operator == (const API_TransactionFlow_args & rhs) const
  {
    if (!(transaction == rhs.transaction))
      return false;
    return true;
  }
  bool operator != (const API_TransactionFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TransactionFlow_pargs {
 public:


  virtual ~API_TransactionFlow_pargs() throw();
  const Transaction* transaction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionFlow_result__isset {
  _API_TransactionFlow_result__isset() : success(false) {}
  bool success :1;
} _API_TransactionFlow_result__isset;

class API_TransactionFlow_result {
 public:

  API_TransactionFlow_result(const API_TransactionFlow_result&);
  API_TransactionFlow_result(API_TransactionFlow_result&&);
  API_TransactionFlow_result& operator=(const API_TransactionFlow_result&);
  API_TransactionFlow_result& operator=(API_TransactionFlow_result&&);
  API_TransactionFlow_result() {
  }

  virtual ~API_TransactionFlow_result() throw();
  TransactionFlowResult success;

  _API_TransactionFlow_result__isset __isset;

  void __set_success(const TransactionFlowResult& val);

  bool operator == (const API_TransactionFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TransactionFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionFlow_presult__isset {
  _API_TransactionFlow_presult__isset() : success(false) {}
  bool success :1;
} _API_TransactionFlow_presult__isset;

class API_TransactionFlow_presult {
 public:


  virtual ~API_TransactionFlow_presult() throw();
  TransactionFlowResult* success;

  _API_TransactionFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TransactionsListGet_args__isset {
  _API_TransactionsListGet_args__isset() : offset(false), limit(false) {}
  bool offset :1;
  bool limit :1;
} _API_TransactionsListGet_args__isset;

class API_TransactionsListGet_args {
 public:

  API_TransactionsListGet_args(const API_TransactionsListGet_args&);
  API_TransactionsListGet_args(API_TransactionsListGet_args&&);
  API_TransactionsListGet_args& operator=(const API_TransactionsListGet_args&);
  API_TransactionsListGet_args& operator=(API_TransactionsListGet_args&&);
  API_TransactionsListGet_args() : offset(0), limit(0) {
  }

  virtual ~API_TransactionsListGet_args() throw();
  int64_t offset;
  int64_t limit;

  _API_TransactionsListGet_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_TransactionsListGet_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_TransactionsListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionsListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TransactionsListGet_pargs {
 public:


  virtual ~API_TransactionsListGet_pargs() throw();
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionsListGet_result__isset {
  _API_TransactionsListGet_result__isset() : success(false) {}
  bool success :1;
} _API_TransactionsListGet_result__isset;

class API_TransactionsListGet_result {
 public:

  API_TransactionsListGet_result(const API_TransactionsListGet_result&);
  API_TransactionsListGet_result(API_TransactionsListGet_result&&);
  API_TransactionsListGet_result& operator=(const API_TransactionsListGet_result&);
  API_TransactionsListGet_result& operator=(API_TransactionsListGet_result&&);
  API_TransactionsListGet_result() {
  }

  virtual ~API_TransactionsListGet_result() throw();
  TransactionsGetResult success;

  _API_TransactionsListGet_result__isset __isset;

  void __set_success(const TransactionsGetResult& val);

  bool operator == (const API_TransactionsListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TransactionsListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionsListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionsListGet_presult__isset {
  _API_TransactionsListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TransactionsListGet_presult__isset;

class API_TransactionsListGet_presult {
 public:


  virtual ~API_TransactionsListGet_presult() throw();
  TransactionsGetResult* success;

  _API_TransactionsListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class API_GetLastHash_args {
 public:

  API_GetLastHash_args(const API_GetLastHash_args&);
  API_GetLastHash_args(API_GetLastHash_args&&);
  API_GetLastHash_args& operator=(const API_GetLastHash_args&);
  API_GetLastHash_args& operator=(API_GetLastHash_args&&);
  API_GetLastHash_args() {
  }

  virtual ~API_GetLastHash_args() throw();

  bool operator == (const API_GetLastHash_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const API_GetLastHash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_GetLastHash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_GetLastHash_pargs {
 public:


  virtual ~API_GetLastHash_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_GetLastHash_result__isset {
  _API_GetLastHash_result__isset() : success(false) {}
  bool success :1;
} _API_GetLastHash_result__isset;

class API_GetLastHash_result {
 public:

  API_GetLastHash_result(const API_GetLastHash_result&);
  API_GetLastHash_result(API_GetLastHash_result&&);
  API_GetLastHash_result& operator=(const API_GetLastHash_result&);
  API_GetLastHash_result& operator=(API_GetLastHash_result&&);
  API_GetLastHash_result() : success() {
  }

  virtual ~API_GetLastHash_result() throw();
  PoolHash success;

  _API_GetLastHash_result__isset __isset;

  void __set_success(const PoolHash& val);

  bool operator == (const API_GetLastHash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_GetLastHash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_GetLastHash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_GetLastHash_presult__isset {
  _API_GetLastHash_presult__isset() : success(false) {}
  bool success :1;
} _API_GetLastHash_presult__isset;

class API_GetLastHash_presult {
 public:


  virtual ~API_GetLastHash_presult() throw();
  PoolHash* success;

  _API_GetLastHash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_PoolListGetStable_args__isset {
  _API_PoolListGetStable_args__isset() : hash(false), limit(false) {}
  bool hash :1;
  bool limit :1;
} _API_PoolListGetStable_args__isset;

class API_PoolListGetStable_args {
 public:

  API_PoolListGetStable_args(const API_PoolListGetStable_args&);
  API_PoolListGetStable_args(API_PoolListGetStable_args&&);
  API_PoolListGetStable_args& operator=(const API_PoolListGetStable_args&);
  API_PoolListGetStable_args& operator=(API_PoolListGetStable_args&&);
  API_PoolListGetStable_args() : hash(), limit(0) {
  }

  virtual ~API_PoolListGetStable_args() throw();
  PoolHash hash;
  int64_t limit;

  _API_PoolListGetStable_args__isset __isset;

  void __set_hash(const PoolHash& val);

  void __set_limit(const int64_t val);

  bool operator == (const API_PoolListGetStable_args & rhs) const
  {
    if (!(hash == rhs.hash))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_PoolListGetStable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolListGetStable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_PoolListGetStable_pargs {
 public:


  virtual ~API_PoolListGetStable_pargs() throw();
  const PoolHash* hash;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolListGetStable_result__isset {
  _API_PoolListGetStable_result__isset() : success(false) {}
  bool success :1;
} _API_PoolListGetStable_result__isset;

class API_PoolListGetStable_result {
 public:

  API_PoolListGetStable_result(const API_PoolListGetStable_result&);
  API_PoolListGetStable_result(API_PoolListGetStable_result&&);
  API_PoolListGetStable_result& operator=(const API_PoolListGetStable_result&);
  API_PoolListGetStable_result& operator=(API_PoolListGetStable_result&&);
  API_PoolListGetStable_result() {
  }

  virtual ~API_PoolListGetStable_result() throw();
  PoolListGetResult success;

  _API_PoolListGetStable_result__isset __isset;

  void __set_success(const PoolListGetResult& val);

  bool operator == (const API_PoolListGetStable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_PoolListGetStable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolListGetStable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolListGetStable_presult__isset {
  _API_PoolListGetStable_presult__isset() : success(false) {}
  bool success :1;
} _API_PoolListGetStable_presult__isset;

class API_PoolListGetStable_presult {
 public:


  virtual ~API_PoolListGetStable_presult() throw();
  PoolListGetResult* success;

  _API_PoolListGetStable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_PoolListGet_args__isset {
  _API_PoolListGet_args__isset() : offset(false), limit(false) {}
  bool offset :1;
  bool limit :1;
} _API_PoolListGet_args__isset;

class API_PoolListGet_args {
 public:

  API_PoolListGet_args(const API_PoolListGet_args&);
  API_PoolListGet_args(API_PoolListGet_args&&);
  API_PoolListGet_args& operator=(const API_PoolListGet_args&);
  API_PoolListGet_args& operator=(API_PoolListGet_args&&);
  API_PoolListGet_args() : offset(0), limit(0) {
  }

  virtual ~API_PoolListGet_args() throw();
  int64_t offset;
  int64_t limit;

  _API_PoolListGet_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_PoolListGet_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_PoolListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_PoolListGet_pargs {
 public:


  virtual ~API_PoolListGet_pargs() throw();
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolListGet_result__isset {
  _API_PoolListGet_result__isset() : success(false) {}
  bool success :1;
} _API_PoolListGet_result__isset;

class API_PoolListGet_result {
 public:

  API_PoolListGet_result(const API_PoolListGet_result&);
  API_PoolListGet_result(API_PoolListGet_result&&);
  API_PoolListGet_result& operator=(const API_PoolListGet_result&);
  API_PoolListGet_result& operator=(API_PoolListGet_result&&);
  API_PoolListGet_result() {
  }

  virtual ~API_PoolListGet_result() throw();
  PoolListGetResult success;

  _API_PoolListGet_result__isset __isset;

  void __set_success(const PoolListGetResult& val);

  bool operator == (const API_PoolListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_PoolListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolListGet_presult__isset {
  _API_PoolListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_PoolListGet_presult__isset;

class API_PoolListGet_presult {
 public:


  virtual ~API_PoolListGet_presult() throw();
  PoolListGetResult* success;

  _API_PoolListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_PoolInfoGet_args__isset {
  _API_PoolInfoGet_args__isset() : hash(false), index(false) {}
  bool hash :1;
  bool index :1;
} _API_PoolInfoGet_args__isset;

class API_PoolInfoGet_args {
 public:

  API_PoolInfoGet_args(const API_PoolInfoGet_args&);
  API_PoolInfoGet_args(API_PoolInfoGet_args&&);
  API_PoolInfoGet_args& operator=(const API_PoolInfoGet_args&);
  API_PoolInfoGet_args& operator=(API_PoolInfoGet_args&&);
  API_PoolInfoGet_args() : hash(), index(0) {
  }

  virtual ~API_PoolInfoGet_args() throw();
  PoolHash hash;
  int64_t index;

  _API_PoolInfoGet_args__isset __isset;

  void __set_hash(const PoolHash& val);

  void __set_index(const int64_t val);

  bool operator == (const API_PoolInfoGet_args & rhs) const
  {
    if (!(hash == rhs.hash))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const API_PoolInfoGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolInfoGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_PoolInfoGet_pargs {
 public:


  virtual ~API_PoolInfoGet_pargs() throw();
  const PoolHash* hash;
  const int64_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolInfoGet_result__isset {
  _API_PoolInfoGet_result__isset() : success(false) {}
  bool success :1;
} _API_PoolInfoGet_result__isset;

class API_PoolInfoGet_result {
 public:

  API_PoolInfoGet_result(const API_PoolInfoGet_result&);
  API_PoolInfoGet_result(API_PoolInfoGet_result&&);
  API_PoolInfoGet_result& operator=(const API_PoolInfoGet_result&);
  API_PoolInfoGet_result& operator=(API_PoolInfoGet_result&&);
  API_PoolInfoGet_result() {
  }

  virtual ~API_PoolInfoGet_result() throw();
  PoolInfoGetResult success;

  _API_PoolInfoGet_result__isset __isset;

  void __set_success(const PoolInfoGetResult& val);

  bool operator == (const API_PoolInfoGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_PoolInfoGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolInfoGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolInfoGet_presult__isset {
  _API_PoolInfoGet_presult__isset() : success(false) {}
  bool success :1;
} _API_PoolInfoGet_presult__isset;

class API_PoolInfoGet_presult {
 public:


  virtual ~API_PoolInfoGet_presult() throw();
  PoolInfoGetResult* success;

  _API_PoolInfoGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_PoolTransactionsGet_args__isset {
  _API_PoolTransactionsGet_args__isset() : hash(false), offset(false), limit(false) {}
  bool hash :1;
  bool offset :1;
  bool limit :1;
} _API_PoolTransactionsGet_args__isset;

class API_PoolTransactionsGet_args {
 public:

  API_PoolTransactionsGet_args(const API_PoolTransactionsGet_args&);
  API_PoolTransactionsGet_args(API_PoolTransactionsGet_args&&);
  API_PoolTransactionsGet_args& operator=(const API_PoolTransactionsGet_args&);
  API_PoolTransactionsGet_args& operator=(API_PoolTransactionsGet_args&&);
  API_PoolTransactionsGet_args() : hash(), offset(0), limit(0) {
  }

  virtual ~API_PoolTransactionsGet_args() throw();
  PoolHash hash;
  int64_t offset;
  int64_t limit;

  _API_PoolTransactionsGet_args__isset __isset;

  void __set_hash(const PoolHash& val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_PoolTransactionsGet_args & rhs) const
  {
    if (!(hash == rhs.hash))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_PoolTransactionsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolTransactionsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_PoolTransactionsGet_pargs {
 public:


  virtual ~API_PoolTransactionsGet_pargs() throw();
  const PoolHash* hash;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolTransactionsGet_result__isset {
  _API_PoolTransactionsGet_result__isset() : success(false) {}
  bool success :1;
} _API_PoolTransactionsGet_result__isset;

class API_PoolTransactionsGet_result {
 public:

  API_PoolTransactionsGet_result(const API_PoolTransactionsGet_result&);
  API_PoolTransactionsGet_result(API_PoolTransactionsGet_result&&);
  API_PoolTransactionsGet_result& operator=(const API_PoolTransactionsGet_result&);
  API_PoolTransactionsGet_result& operator=(API_PoolTransactionsGet_result&&);
  API_PoolTransactionsGet_result() {
  }

  virtual ~API_PoolTransactionsGet_result() throw();
  PoolTransactionsGetResult success;

  _API_PoolTransactionsGet_result__isset __isset;

  void __set_success(const PoolTransactionsGetResult& val);

  bool operator == (const API_PoolTransactionsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_PoolTransactionsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolTransactionsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolTransactionsGet_presult__isset {
  _API_PoolTransactionsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_PoolTransactionsGet_presult__isset;

class API_PoolTransactionsGet_presult {
 public:


  virtual ~API_PoolTransactionsGet_presult() throw();
  PoolTransactionsGetResult* success;

  _API_PoolTransactionsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class API_StatsGet_args {
 public:

  API_StatsGet_args(const API_StatsGet_args&);
  API_StatsGet_args(API_StatsGet_args&&);
  API_StatsGet_args& operator=(const API_StatsGet_args&);
  API_StatsGet_args& operator=(API_StatsGet_args&&);
  API_StatsGet_args() {
  }

  virtual ~API_StatsGet_args() throw();

  bool operator == (const API_StatsGet_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const API_StatsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_StatsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_StatsGet_pargs {
 public:


  virtual ~API_StatsGet_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_StatsGet_result__isset {
  _API_StatsGet_result__isset() : success(false) {}
  bool success :1;
} _API_StatsGet_result__isset;

class API_StatsGet_result {
 public:

  API_StatsGet_result(const API_StatsGet_result&);
  API_StatsGet_result(API_StatsGet_result&&);
  API_StatsGet_result& operator=(const API_StatsGet_result&);
  API_StatsGet_result& operator=(API_StatsGet_result&&);
  API_StatsGet_result() {
  }

  virtual ~API_StatsGet_result() throw();
  StatsGetResult success;

  _API_StatsGet_result__isset __isset;

  void __set_success(const StatsGetResult& val);

  bool operator == (const API_StatsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_StatsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_StatsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_StatsGet_presult__isset {
  _API_StatsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_StatsGet_presult__isset;

class API_StatsGet_presult {
 public:


  virtual ~API_StatsGet_presult() throw();
  StatsGetResult* success;

  _API_StatsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractGet_args__isset {
  _API_SmartContractGet_args__isset() : address(false) {}
  bool address :1;
} _API_SmartContractGet_args__isset;

class API_SmartContractGet_args {
 public:

  API_SmartContractGet_args(const API_SmartContractGet_args&);
  API_SmartContractGet_args(API_SmartContractGet_args&&);
  API_SmartContractGet_args& operator=(const API_SmartContractGet_args&);
  API_SmartContractGet_args& operator=(API_SmartContractGet_args&&);
  API_SmartContractGet_args() : address() {
  }

  virtual ~API_SmartContractGet_args() throw();
  Address address;

  _API_SmartContractGet_args__isset __isset;

  void __set_address(const Address& val);

  bool operator == (const API_SmartContractGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractGet_pargs {
 public:


  virtual ~API_SmartContractGet_pargs() throw();
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractGet_result__isset {
  _API_SmartContractGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractGet_result__isset;

class API_SmartContractGet_result {
 public:

  API_SmartContractGet_result(const API_SmartContractGet_result&);
  API_SmartContractGet_result(API_SmartContractGet_result&&);
  API_SmartContractGet_result& operator=(const API_SmartContractGet_result&);
  API_SmartContractGet_result& operator=(API_SmartContractGet_result&&);
  API_SmartContractGet_result() {
  }

  virtual ~API_SmartContractGet_result() throw();
  SmartContractGetResult success;

  _API_SmartContractGet_result__isset __isset;

  void __set_success(const SmartContractGetResult& val);

  bool operator == (const API_SmartContractGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractGet_presult__isset {
  _API_SmartContractGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractGet_presult__isset;

class API_SmartContractGet_presult {
 public:


  virtual ~API_SmartContractGet_presult() throw();
  SmartContractGetResult* success;

  _API_SmartContractGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractsListGet_args__isset {
  _API_SmartContractsListGet_args__isset() : deployer(false) {}
  bool deployer :1;
} _API_SmartContractsListGet_args__isset;

class API_SmartContractsListGet_args {
 public:

  API_SmartContractsListGet_args(const API_SmartContractsListGet_args&);
  API_SmartContractsListGet_args(API_SmartContractsListGet_args&&);
  API_SmartContractsListGet_args& operator=(const API_SmartContractsListGet_args&);
  API_SmartContractsListGet_args& operator=(API_SmartContractsListGet_args&&);
  API_SmartContractsListGet_args() : deployer() {
  }

  virtual ~API_SmartContractsListGet_args() throw();
  Address deployer;

  _API_SmartContractsListGet_args__isset __isset;

  void __set_deployer(const Address& val);

  bool operator == (const API_SmartContractsListGet_args & rhs) const
  {
    if (!(deployer == rhs.deployer))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractsListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractsListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractsListGet_pargs {
 public:


  virtual ~API_SmartContractsListGet_pargs() throw();
  const Address* deployer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractsListGet_result__isset {
  _API_SmartContractsListGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractsListGet_result__isset;

class API_SmartContractsListGet_result {
 public:

  API_SmartContractsListGet_result(const API_SmartContractsListGet_result&);
  API_SmartContractsListGet_result(API_SmartContractsListGet_result&&);
  API_SmartContractsListGet_result& operator=(const API_SmartContractsListGet_result&);
  API_SmartContractsListGet_result& operator=(API_SmartContractsListGet_result&&);
  API_SmartContractsListGet_result() {
  }

  virtual ~API_SmartContractsListGet_result() throw();
  SmartContractsListGetResult success;

  _API_SmartContractsListGet_result__isset __isset;

  void __set_success(const SmartContractsListGetResult& val);

  bool operator == (const API_SmartContractsListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractsListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractsListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractsListGet_presult__isset {
  _API_SmartContractsListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractsListGet_presult__isset;

class API_SmartContractsListGet_presult {
 public:


  virtual ~API_SmartContractsListGet_presult() throw();
  SmartContractsListGetResult* success;

  _API_SmartContractsListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractAddressesListGet_args__isset {
  _API_SmartContractAddressesListGet_args__isset() : deployer(false) {}
  bool deployer :1;
} _API_SmartContractAddressesListGet_args__isset;

class API_SmartContractAddressesListGet_args {
 public:

  API_SmartContractAddressesListGet_args(const API_SmartContractAddressesListGet_args&);
  API_SmartContractAddressesListGet_args(API_SmartContractAddressesListGet_args&&);
  API_SmartContractAddressesListGet_args& operator=(const API_SmartContractAddressesListGet_args&);
  API_SmartContractAddressesListGet_args& operator=(API_SmartContractAddressesListGet_args&&);
  API_SmartContractAddressesListGet_args() : deployer() {
  }

  virtual ~API_SmartContractAddressesListGet_args() throw();
  Address deployer;

  _API_SmartContractAddressesListGet_args__isset __isset;

  void __set_deployer(const Address& val);

  bool operator == (const API_SmartContractAddressesListGet_args & rhs) const
  {
    if (!(deployer == rhs.deployer))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractAddressesListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractAddressesListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractAddressesListGet_pargs {
 public:


  virtual ~API_SmartContractAddressesListGet_pargs() throw();
  const Address* deployer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractAddressesListGet_result__isset {
  _API_SmartContractAddressesListGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractAddressesListGet_result__isset;

class API_SmartContractAddressesListGet_result {
 public:

  API_SmartContractAddressesListGet_result(const API_SmartContractAddressesListGet_result&);
  API_SmartContractAddressesListGet_result(API_SmartContractAddressesListGet_result&&);
  API_SmartContractAddressesListGet_result& operator=(const API_SmartContractAddressesListGet_result&);
  API_SmartContractAddressesListGet_result& operator=(API_SmartContractAddressesListGet_result&&);
  API_SmartContractAddressesListGet_result() {
  }

  virtual ~API_SmartContractAddressesListGet_result() throw();
  SmartContractAddressesListGetResult success;

  _API_SmartContractAddressesListGet_result__isset __isset;

  void __set_success(const SmartContractAddressesListGetResult& val);

  bool operator == (const API_SmartContractAddressesListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractAddressesListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractAddressesListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractAddressesListGet_presult__isset {
  _API_SmartContractAddressesListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractAddressesListGet_presult__isset;

class API_SmartContractAddressesListGet_presult {
 public:


  virtual ~API_SmartContractAddressesListGet_presult() throw();
  SmartContractAddressesListGetResult* success;

  _API_SmartContractAddressesListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_WaitForBlock_args__isset {
  _API_WaitForBlock_args__isset() : obsolete(false) {}
  bool obsolete :1;
} _API_WaitForBlock_args__isset;

class API_WaitForBlock_args {
 public:

  API_WaitForBlock_args(const API_WaitForBlock_args&);
  API_WaitForBlock_args(API_WaitForBlock_args&&);
  API_WaitForBlock_args& operator=(const API_WaitForBlock_args&);
  API_WaitForBlock_args& operator=(API_WaitForBlock_args&&);
  API_WaitForBlock_args() : obsolete() {
  }

  virtual ~API_WaitForBlock_args() throw();
  PoolHash obsolete;

  _API_WaitForBlock_args__isset __isset;

  void __set_obsolete(const PoolHash& val);

  bool operator == (const API_WaitForBlock_args & rhs) const
  {
    if (!(obsolete == rhs.obsolete))
      return false;
    return true;
  }
  bool operator != (const API_WaitForBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WaitForBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WaitForBlock_pargs {
 public:


  virtual ~API_WaitForBlock_pargs() throw();
  const PoolHash* obsolete;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WaitForBlock_result__isset {
  _API_WaitForBlock_result__isset() : success(false) {}
  bool success :1;
} _API_WaitForBlock_result__isset;

class API_WaitForBlock_result {
 public:

  API_WaitForBlock_result(const API_WaitForBlock_result&);
  API_WaitForBlock_result(API_WaitForBlock_result&&);
  API_WaitForBlock_result& operator=(const API_WaitForBlock_result&);
  API_WaitForBlock_result& operator=(API_WaitForBlock_result&&);
  API_WaitForBlock_result() : success() {
  }

  virtual ~API_WaitForBlock_result() throw();
  PoolHash success;

  _API_WaitForBlock_result__isset __isset;

  void __set_success(const PoolHash& val);

  bool operator == (const API_WaitForBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WaitForBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WaitForBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WaitForBlock_presult__isset {
  _API_WaitForBlock_presult__isset() : success(false) {}
  bool success :1;
} _API_WaitForBlock_presult__isset;

class API_WaitForBlock_presult {
 public:


  virtual ~API_WaitForBlock_presult() throw();
  PoolHash* success;

  _API_WaitForBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_WaitForSmartTransaction_args__isset {
  _API_WaitForSmartTransaction_args__isset() : smart_public(false) {}
  bool smart_public :1;
} _API_WaitForSmartTransaction_args__isset;

class API_WaitForSmartTransaction_args {
 public:

  API_WaitForSmartTransaction_args(const API_WaitForSmartTransaction_args&);
  API_WaitForSmartTransaction_args(API_WaitForSmartTransaction_args&&);
  API_WaitForSmartTransaction_args& operator=(const API_WaitForSmartTransaction_args&);
  API_WaitForSmartTransaction_args& operator=(API_WaitForSmartTransaction_args&&);
  API_WaitForSmartTransaction_args() : smart_public() {
  }

  virtual ~API_WaitForSmartTransaction_args() throw();
  Address smart_public;

  _API_WaitForSmartTransaction_args__isset __isset;

  void __set_smart_public(const Address& val);

  bool operator == (const API_WaitForSmartTransaction_args & rhs) const
  {
    if (!(smart_public == rhs.smart_public))
      return false;
    return true;
  }
  bool operator != (const API_WaitForSmartTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WaitForSmartTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WaitForSmartTransaction_pargs {
 public:


  virtual ~API_WaitForSmartTransaction_pargs() throw();
  const Address* smart_public;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WaitForSmartTransaction_result__isset {
  _API_WaitForSmartTransaction_result__isset() : success(false) {}
  bool success :1;
} _API_WaitForSmartTransaction_result__isset;

class API_WaitForSmartTransaction_result {
 public:

  API_WaitForSmartTransaction_result(const API_WaitForSmartTransaction_result&);
  API_WaitForSmartTransaction_result(API_WaitForSmartTransaction_result&&);
  API_WaitForSmartTransaction_result& operator=(const API_WaitForSmartTransaction_result&);
  API_WaitForSmartTransaction_result& operator=(API_WaitForSmartTransaction_result&&);
  API_WaitForSmartTransaction_result() {
  }

  virtual ~API_WaitForSmartTransaction_result() throw();
  TransactionId success;

  _API_WaitForSmartTransaction_result__isset __isset;

  void __set_success(const TransactionId& val);

  bool operator == (const API_WaitForSmartTransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WaitForSmartTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WaitForSmartTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WaitForSmartTransaction_presult__isset {
  _API_WaitForSmartTransaction_presult__isset() : success(false) {}
  bool success :1;
} _API_WaitForSmartTransaction_presult__isset;

class API_WaitForSmartTransaction_presult {
 public:


  virtual ~API_WaitForSmartTransaction_presult() throw();
  TransactionId* success;

  _API_WaitForSmartTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractsAllListGet_args__isset {
  _API_SmartContractsAllListGet_args__isset() : offset(false), limit(false) {}
  bool offset :1;
  bool limit :1;
} _API_SmartContractsAllListGet_args__isset;

class API_SmartContractsAllListGet_args {
 public:

  API_SmartContractsAllListGet_args(const API_SmartContractsAllListGet_args&);
  API_SmartContractsAllListGet_args(API_SmartContractsAllListGet_args&&);
  API_SmartContractsAllListGet_args& operator=(const API_SmartContractsAllListGet_args&);
  API_SmartContractsAllListGet_args& operator=(API_SmartContractsAllListGet_args&&);
  API_SmartContractsAllListGet_args() : offset(0), limit(0) {
  }

  virtual ~API_SmartContractsAllListGet_args() throw();
  int64_t offset;
  int64_t limit;

  _API_SmartContractsAllListGet_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_SmartContractsAllListGet_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractsAllListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractsAllListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractsAllListGet_pargs {
 public:


  virtual ~API_SmartContractsAllListGet_pargs() throw();
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractsAllListGet_result__isset {
  _API_SmartContractsAllListGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractsAllListGet_result__isset;

class API_SmartContractsAllListGet_result {
 public:

  API_SmartContractsAllListGet_result(const API_SmartContractsAllListGet_result&);
  API_SmartContractsAllListGet_result(API_SmartContractsAllListGet_result&&);
  API_SmartContractsAllListGet_result& operator=(const API_SmartContractsAllListGet_result&);
  API_SmartContractsAllListGet_result& operator=(API_SmartContractsAllListGet_result&&);
  API_SmartContractsAllListGet_result() {
  }

  virtual ~API_SmartContractsAllListGet_result() throw();
  SmartContractsListGetResult success;

  _API_SmartContractsAllListGet_result__isset __isset;

  void __set_success(const SmartContractsListGetResult& val);

  bool operator == (const API_SmartContractsAllListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractsAllListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractsAllListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractsAllListGet_presult__isset {
  _API_SmartContractsAllListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractsAllListGet_presult__isset;

class API_SmartContractsAllListGet_presult {
 public:


  virtual ~API_SmartContractsAllListGet_presult() throw();
  SmartContractsListGetResult* success;

  _API_SmartContractsAllListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TransactionsStateGet_args__isset {
  _API_TransactionsStateGet_args__isset() : address(false), id(false) {}
  bool address :1;
  bool id :1;
} _API_TransactionsStateGet_args__isset;

class API_TransactionsStateGet_args {
 public:

  API_TransactionsStateGet_args(const API_TransactionsStateGet_args&);
  API_TransactionsStateGet_args(API_TransactionsStateGet_args&&);
  API_TransactionsStateGet_args& operator=(const API_TransactionsStateGet_args&);
  API_TransactionsStateGet_args& operator=(API_TransactionsStateGet_args&&);
  API_TransactionsStateGet_args() : address() {
  }

  virtual ~API_TransactionsStateGet_args() throw();
  Address address;
  std::vector<TransactionInnerId>  id;

  _API_TransactionsStateGet_args__isset __isset;

  void __set_address(const Address& val);

  void __set_id(const std::vector<TransactionInnerId> & val);

  bool operator == (const API_TransactionsStateGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const API_TransactionsStateGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionsStateGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TransactionsStateGet_pargs {
 public:


  virtual ~API_TransactionsStateGet_pargs() throw();
  const Address* address;
  const std::vector<TransactionInnerId> * id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionsStateGet_result__isset {
  _API_TransactionsStateGet_result__isset() : success(false) {}
  bool success :1;
} _API_TransactionsStateGet_result__isset;

class API_TransactionsStateGet_result {
 public:

  API_TransactionsStateGet_result(const API_TransactionsStateGet_result&);
  API_TransactionsStateGet_result(API_TransactionsStateGet_result&&);
  API_TransactionsStateGet_result& operator=(const API_TransactionsStateGet_result&);
  API_TransactionsStateGet_result& operator=(API_TransactionsStateGet_result&&);
  API_TransactionsStateGet_result() {
  }

  virtual ~API_TransactionsStateGet_result() throw();
  TransactionsStateGetResult success;

  _API_TransactionsStateGet_result__isset __isset;

  void __set_success(const TransactionsStateGetResult& val);

  bool operator == (const API_TransactionsStateGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TransactionsStateGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionsStateGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionsStateGet_presult__isset {
  _API_TransactionsStateGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TransactionsStateGet_presult__isset;

class API_TransactionsStateGet_presult {
 public:


  virtual ~API_TransactionsStateGet_presult() throw();
  TransactionsStateGetResult* success;

  _API_TransactionsStateGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_ContractAllMethodsGet_args__isset {
  _API_ContractAllMethodsGet_args__isset() : byteCodeObjects(false) {}
  bool byteCodeObjects :1;
} _API_ContractAllMethodsGet_args__isset;

class API_ContractAllMethodsGet_args {
 public:

  API_ContractAllMethodsGet_args(const API_ContractAllMethodsGet_args&);
  API_ContractAllMethodsGet_args(API_ContractAllMethodsGet_args&&);
  API_ContractAllMethodsGet_args& operator=(const API_ContractAllMethodsGet_args&);
  API_ContractAllMethodsGet_args& operator=(API_ContractAllMethodsGet_args&&);
  API_ContractAllMethodsGet_args() {
  }

  virtual ~API_ContractAllMethodsGet_args() throw();
  std::vector< ::general::ByteCodeObject>  byteCodeObjects;

  _API_ContractAllMethodsGet_args__isset __isset;

  void __set_byteCodeObjects(const std::vector< ::general::ByteCodeObject> & val);

  bool operator == (const API_ContractAllMethodsGet_args & rhs) const
  {
    if (!(byteCodeObjects == rhs.byteCodeObjects))
      return false;
    return true;
  }
  bool operator != (const API_ContractAllMethodsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_ContractAllMethodsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_ContractAllMethodsGet_pargs {
 public:


  virtual ~API_ContractAllMethodsGet_pargs() throw();
  const std::vector< ::general::ByteCodeObject> * byteCodeObjects;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_ContractAllMethodsGet_result__isset {
  _API_ContractAllMethodsGet_result__isset() : success(false) {}
  bool success :1;
} _API_ContractAllMethodsGet_result__isset;

class API_ContractAllMethodsGet_result {
 public:

  API_ContractAllMethodsGet_result(const API_ContractAllMethodsGet_result&);
  API_ContractAllMethodsGet_result(API_ContractAllMethodsGet_result&&);
  API_ContractAllMethodsGet_result& operator=(const API_ContractAllMethodsGet_result&);
  API_ContractAllMethodsGet_result& operator=(API_ContractAllMethodsGet_result&&);
  API_ContractAllMethodsGet_result() {
  }

  virtual ~API_ContractAllMethodsGet_result() throw();
  ContractAllMethodsGetResult success;

  _API_ContractAllMethodsGet_result__isset __isset;

  void __set_success(const ContractAllMethodsGetResult& val);

  bool operator == (const API_ContractAllMethodsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_ContractAllMethodsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_ContractAllMethodsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_ContractAllMethodsGet_presult__isset {
  _API_ContractAllMethodsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_ContractAllMethodsGet_presult__isset;

class API_ContractAllMethodsGet_presult {
 public:


  virtual ~API_ContractAllMethodsGet_presult() throw();
  ContractAllMethodsGetResult* success;

  _API_ContractAllMethodsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartMethodParamsGet_args__isset {
  _API_SmartMethodParamsGet_args__isset() : address(false), id(false) {}
  bool address :1;
  bool id :1;
} _API_SmartMethodParamsGet_args__isset;

class API_SmartMethodParamsGet_args {
 public:

  API_SmartMethodParamsGet_args(const API_SmartMethodParamsGet_args&);
  API_SmartMethodParamsGet_args(API_SmartMethodParamsGet_args&&);
  API_SmartMethodParamsGet_args& operator=(const API_SmartMethodParamsGet_args&);
  API_SmartMethodParamsGet_args& operator=(API_SmartMethodParamsGet_args&&);
  API_SmartMethodParamsGet_args() : address(), id(0) {
  }

  virtual ~API_SmartMethodParamsGet_args() throw();
  Address address;
  TransactionInnerId id;

  _API_SmartMethodParamsGet_args__isset __isset;

  void __set_address(const Address& val);

  void __set_id(const TransactionInnerId val);

  bool operator == (const API_SmartMethodParamsGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const API_SmartMethodParamsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartMethodParamsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartMethodParamsGet_pargs {
 public:


  virtual ~API_SmartMethodParamsGet_pargs() throw();
  const Address* address;
  const TransactionInnerId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartMethodParamsGet_result__isset {
  _API_SmartMethodParamsGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartMethodParamsGet_result__isset;

class API_SmartMethodParamsGet_result {
 public:

  API_SmartMethodParamsGet_result(const API_SmartMethodParamsGet_result&);
  API_SmartMethodParamsGet_result(API_SmartMethodParamsGet_result&&);
  API_SmartMethodParamsGet_result& operator=(const API_SmartMethodParamsGet_result&);
  API_SmartMethodParamsGet_result& operator=(API_SmartMethodParamsGet_result&&);
  API_SmartMethodParamsGet_result() {
  }

  virtual ~API_SmartMethodParamsGet_result() throw();
  SmartMethodParamsGetResult success;

  _API_SmartMethodParamsGet_result__isset __isset;

  void __set_success(const SmartMethodParamsGetResult& val);

  bool operator == (const API_SmartMethodParamsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartMethodParamsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartMethodParamsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartMethodParamsGet_presult__isset {
  _API_SmartMethodParamsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartMethodParamsGet_presult__isset;

class API_SmartMethodParamsGet_presult {
 public:


  virtual ~API_SmartMethodParamsGet_presult() throw();
  SmartMethodParamsGetResult* success;

  _API_SmartMethodParamsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractDataGet_args__isset {
  _API_SmartContractDataGet_args__isset() : address(false) {}
  bool address :1;
} _API_SmartContractDataGet_args__isset;

class API_SmartContractDataGet_args {
 public:

  API_SmartContractDataGet_args(const API_SmartContractDataGet_args&);
  API_SmartContractDataGet_args(API_SmartContractDataGet_args&&);
  API_SmartContractDataGet_args& operator=(const API_SmartContractDataGet_args&);
  API_SmartContractDataGet_args& operator=(API_SmartContractDataGet_args&&);
  API_SmartContractDataGet_args() : address() {
  }

  virtual ~API_SmartContractDataGet_args() throw();
  Address address;

  _API_SmartContractDataGet_args__isset __isset;

  void __set_address(const Address& val);

  bool operator == (const API_SmartContractDataGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractDataGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractDataGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractDataGet_pargs {
 public:


  virtual ~API_SmartContractDataGet_pargs() throw();
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractDataGet_result__isset {
  _API_SmartContractDataGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractDataGet_result__isset;

class API_SmartContractDataGet_result {
 public:

  API_SmartContractDataGet_result(const API_SmartContractDataGet_result&);
  API_SmartContractDataGet_result(API_SmartContractDataGet_result&&);
  API_SmartContractDataGet_result& operator=(const API_SmartContractDataGet_result&);
  API_SmartContractDataGet_result& operator=(API_SmartContractDataGet_result&&);
  API_SmartContractDataGet_result() {
  }

  virtual ~API_SmartContractDataGet_result() throw();
  SmartContractDataResult success;

  _API_SmartContractDataGet_result__isset __isset;

  void __set_success(const SmartContractDataResult& val);

  bool operator == (const API_SmartContractDataGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractDataGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractDataGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractDataGet_presult__isset {
  _API_SmartContractDataGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractDataGet_presult__isset;

class API_SmartContractDataGet_presult {
 public:


  virtual ~API_SmartContractDataGet_presult() throw();
  SmartContractDataResult* success;

  _API_SmartContractDataGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractCompile_args__isset {
  _API_SmartContractCompile_args__isset() : sourceCode(false) {}
  bool sourceCode :1;
} _API_SmartContractCompile_args__isset;

class API_SmartContractCompile_args {
 public:

  API_SmartContractCompile_args(const API_SmartContractCompile_args&);
  API_SmartContractCompile_args(API_SmartContractCompile_args&&);
  API_SmartContractCompile_args& operator=(const API_SmartContractCompile_args&);
  API_SmartContractCompile_args& operator=(API_SmartContractCompile_args&&);
  API_SmartContractCompile_args() : sourceCode() {
  }

  virtual ~API_SmartContractCompile_args() throw();
  std::string sourceCode;

  _API_SmartContractCompile_args__isset __isset;

  void __set_sourceCode(const std::string& val);

  bool operator == (const API_SmartContractCompile_args & rhs) const
  {
    if (!(sourceCode == rhs.sourceCode))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractCompile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractCompile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractCompile_pargs {
 public:


  virtual ~API_SmartContractCompile_pargs() throw();
  const std::string* sourceCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractCompile_result__isset {
  _API_SmartContractCompile_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractCompile_result__isset;

class API_SmartContractCompile_result {
 public:

  API_SmartContractCompile_result(const API_SmartContractCompile_result&);
  API_SmartContractCompile_result(API_SmartContractCompile_result&&);
  API_SmartContractCompile_result& operator=(const API_SmartContractCompile_result&);
  API_SmartContractCompile_result& operator=(API_SmartContractCompile_result&&);
  API_SmartContractCompile_result() {
  }

  virtual ~API_SmartContractCompile_result() throw();
  SmartContractCompileResult success;

  _API_SmartContractCompile_result__isset __isset;

  void __set_success(const SmartContractCompileResult& val);

  bool operator == (const API_SmartContractCompile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractCompile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractCompile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractCompile_presult__isset {
  _API_SmartContractCompile_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractCompile_presult__isset;

class API_SmartContractCompile_presult {
 public:


  virtual ~API_SmartContractCompile_presult() throw();
  SmartContractCompileResult* success;

  _API_SmartContractCompile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokenBalancesGet_args__isset {
  _API_TokenBalancesGet_args__isset() : address(false) {}
  bool address :1;
} _API_TokenBalancesGet_args__isset;

class API_TokenBalancesGet_args {
 public:

  API_TokenBalancesGet_args(const API_TokenBalancesGet_args&);
  API_TokenBalancesGet_args(API_TokenBalancesGet_args&&);
  API_TokenBalancesGet_args& operator=(const API_TokenBalancesGet_args&);
  API_TokenBalancesGet_args& operator=(API_TokenBalancesGet_args&&);
  API_TokenBalancesGet_args() : address() {
  }

  virtual ~API_TokenBalancesGet_args() throw();
  Address address;

  _API_TokenBalancesGet_args__isset __isset;

  void __set_address(const Address& val);

  bool operator == (const API_TokenBalancesGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_TokenBalancesGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenBalancesGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokenBalancesGet_pargs {
 public:


  virtual ~API_TokenBalancesGet_pargs() throw();
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenBalancesGet_result__isset {
  _API_TokenBalancesGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokenBalancesGet_result__isset;

class API_TokenBalancesGet_result {
 public:

  API_TokenBalancesGet_result(const API_TokenBalancesGet_result&);
  API_TokenBalancesGet_result(API_TokenBalancesGet_result&&);
  API_TokenBalancesGet_result& operator=(const API_TokenBalancesGet_result&);
  API_TokenBalancesGet_result& operator=(API_TokenBalancesGet_result&&);
  API_TokenBalancesGet_result() {
  }

  virtual ~API_TokenBalancesGet_result() throw();
  TokenBalancesResult success;

  _API_TokenBalancesGet_result__isset __isset;

  void __set_success(const TokenBalancesResult& val);

  bool operator == (const API_TokenBalancesGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokenBalancesGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenBalancesGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenBalancesGet_presult__isset {
  _API_TokenBalancesGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokenBalancesGet_presult__isset;

class API_TokenBalancesGet_presult {
 public:


  virtual ~API_TokenBalancesGet_presult() throw();
  TokenBalancesResult* success;

  _API_TokenBalancesGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokenTransfersGet_args__isset {
  _API_TokenTransfersGet_args__isset() : token(false), offset(false), limit(false) {}
  bool token :1;
  bool offset :1;
  bool limit :1;
} _API_TokenTransfersGet_args__isset;

class API_TokenTransfersGet_args {
 public:

  API_TokenTransfersGet_args(const API_TokenTransfersGet_args&);
  API_TokenTransfersGet_args(API_TokenTransfersGet_args&&);
  API_TokenTransfersGet_args& operator=(const API_TokenTransfersGet_args&);
  API_TokenTransfersGet_args& operator=(API_TokenTransfersGet_args&&);
  API_TokenTransfersGet_args() : token(), offset(0), limit(0) {
  }

  virtual ~API_TokenTransfersGet_args() throw();
  Address token;
  int64_t offset;
  int64_t limit;

  _API_TokenTransfersGet_args__isset __isset;

  void __set_token(const Address& val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_TokenTransfersGet_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_TokenTransfersGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenTransfersGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokenTransfersGet_pargs {
 public:


  virtual ~API_TokenTransfersGet_pargs() throw();
  const Address* token;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenTransfersGet_result__isset {
  _API_TokenTransfersGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokenTransfersGet_result__isset;

class API_TokenTransfersGet_result {
 public:

  API_TokenTransfersGet_result(const API_TokenTransfersGet_result&);
  API_TokenTransfersGet_result(API_TokenTransfersGet_result&&);
  API_TokenTransfersGet_result& operator=(const API_TokenTransfersGet_result&);
  API_TokenTransfersGet_result& operator=(API_TokenTransfersGet_result&&);
  API_TokenTransfersGet_result() {
  }

  virtual ~API_TokenTransfersGet_result() throw();
  TokenTransfersResult success;

  _API_TokenTransfersGet_result__isset __isset;

  void __set_success(const TokenTransfersResult& val);

  bool operator == (const API_TokenTransfersGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokenTransfersGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenTransfersGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenTransfersGet_presult__isset {
  _API_TokenTransfersGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokenTransfersGet_presult__isset;

class API_TokenTransfersGet_presult {
 public:


  virtual ~API_TokenTransfersGet_presult() throw();
  TokenTransfersResult* success;

  _API_TokenTransfersGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokenTransferGet_args__isset {
  _API_TokenTransferGet_args__isset() : token(false), id(false) {}
  bool token :1;
  bool id :1;
} _API_TokenTransferGet_args__isset;

class API_TokenTransferGet_args {
 public:

  API_TokenTransferGet_args(const API_TokenTransferGet_args&);
  API_TokenTransferGet_args(API_TokenTransferGet_args&&);
  API_TokenTransferGet_args& operator=(const API_TokenTransferGet_args&);
  API_TokenTransferGet_args& operator=(API_TokenTransferGet_args&&);
  API_TokenTransferGet_args() : token() {
  }

  virtual ~API_TokenTransferGet_args() throw();
  Address token;
  TransactionId id;

  _API_TokenTransferGet_args__isset __isset;

  void __set_token(const Address& val);

  void __set_id(const TransactionId& val);

  bool operator == (const API_TokenTransferGet_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const API_TokenTransferGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenTransferGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokenTransferGet_pargs {
 public:


  virtual ~API_TokenTransferGet_pargs() throw();
  const Address* token;
  const TransactionId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenTransferGet_result__isset {
  _API_TokenTransferGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokenTransferGet_result__isset;

class API_TokenTransferGet_result {
 public:

  API_TokenTransferGet_result(const API_TokenTransferGet_result&);
  API_TokenTransferGet_result(API_TokenTransferGet_result&&);
  API_TokenTransferGet_result& operator=(const API_TokenTransferGet_result&);
  API_TokenTransferGet_result& operator=(API_TokenTransferGet_result&&);
  API_TokenTransferGet_result() {
  }

  virtual ~API_TokenTransferGet_result() throw();
  TokenTransfersResult success;

  _API_TokenTransferGet_result__isset __isset;

  void __set_success(const TokenTransfersResult& val);

  bool operator == (const API_TokenTransferGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokenTransferGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenTransferGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenTransferGet_presult__isset {
  _API_TokenTransferGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokenTransferGet_presult__isset;

class API_TokenTransferGet_presult {
 public:


  virtual ~API_TokenTransferGet_presult() throw();
  TokenTransfersResult* success;

  _API_TokenTransferGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokenTransfersListGet_args__isset {
  _API_TokenTransfersListGet_args__isset() : offset(false), limit(false) {}
  bool offset :1;
  bool limit :1;
} _API_TokenTransfersListGet_args__isset;

class API_TokenTransfersListGet_args {
 public:

  API_TokenTransfersListGet_args(const API_TokenTransfersListGet_args&);
  API_TokenTransfersListGet_args(API_TokenTransfersListGet_args&&);
  API_TokenTransfersListGet_args& operator=(const API_TokenTransfersListGet_args&);
  API_TokenTransfersListGet_args& operator=(API_TokenTransfersListGet_args&&);
  API_TokenTransfersListGet_args() : offset(0), limit(0) {
  }

  virtual ~API_TokenTransfersListGet_args() throw();
  int64_t offset;
  int64_t limit;

  _API_TokenTransfersListGet_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_TokenTransfersListGet_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_TokenTransfersListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenTransfersListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokenTransfersListGet_pargs {
 public:


  virtual ~API_TokenTransfersListGet_pargs() throw();
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenTransfersListGet_result__isset {
  _API_TokenTransfersListGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokenTransfersListGet_result__isset;

class API_TokenTransfersListGet_result {
 public:

  API_TokenTransfersListGet_result(const API_TokenTransfersListGet_result&);
  API_TokenTransfersListGet_result(API_TokenTransfersListGet_result&&);
  API_TokenTransfersListGet_result& operator=(const API_TokenTransfersListGet_result&);
  API_TokenTransfersListGet_result& operator=(API_TokenTransfersListGet_result&&);
  API_TokenTransfersListGet_result() {
  }

  virtual ~API_TokenTransfersListGet_result() throw();
  TokenTransfersResult success;

  _API_TokenTransfersListGet_result__isset __isset;

  void __set_success(const TokenTransfersResult& val);

  bool operator == (const API_TokenTransfersListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokenTransfersListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenTransfersListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenTransfersListGet_presult__isset {
  _API_TokenTransfersListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokenTransfersListGet_presult__isset;

class API_TokenTransfersListGet_presult {
 public:


  virtual ~API_TokenTransfersListGet_presult() throw();
  TokenTransfersResult* success;

  _API_TokenTransfersListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokenWalletTransfersGet_args__isset {
  _API_TokenWalletTransfersGet_args__isset() : token(false), address(false), offset(false), limit(false) {}
  bool token :1;
  bool address :1;
  bool offset :1;
  bool limit :1;
} _API_TokenWalletTransfersGet_args__isset;

class API_TokenWalletTransfersGet_args {
 public:

  API_TokenWalletTransfersGet_args(const API_TokenWalletTransfersGet_args&);
  API_TokenWalletTransfersGet_args(API_TokenWalletTransfersGet_args&&);
  API_TokenWalletTransfersGet_args& operator=(const API_TokenWalletTransfersGet_args&);
  API_TokenWalletTransfersGet_args& operator=(API_TokenWalletTransfersGet_args&&);
  API_TokenWalletTransfersGet_args() : token(), address(), offset(0), limit(0) {
  }

  virtual ~API_TokenWalletTransfersGet_args() throw();
  Address token;
  Address address;
  int64_t offset;
  int64_t limit;

  _API_TokenWalletTransfersGet_args__isset __isset;

  void __set_token(const Address& val);

  void __set_address(const Address& val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_TokenWalletTransfersGet_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_TokenWalletTransfersGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenWalletTransfersGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokenWalletTransfersGet_pargs {
 public:


  virtual ~API_TokenWalletTransfersGet_pargs() throw();
  const Address* token;
  const Address* address;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenWalletTransfersGet_result__isset {
  _API_TokenWalletTransfersGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokenWalletTransfersGet_result__isset;

class API_TokenWalletTransfersGet_result {
 public:

  API_TokenWalletTransfersGet_result(const API_TokenWalletTransfersGet_result&);
  API_TokenWalletTransfersGet_result(API_TokenWalletTransfersGet_result&&);
  API_TokenWalletTransfersGet_result& operator=(const API_TokenWalletTransfersGet_result&);
  API_TokenWalletTransfersGet_result& operator=(API_TokenWalletTransfersGet_result&&);
  API_TokenWalletTransfersGet_result() {
  }

  virtual ~API_TokenWalletTransfersGet_result() throw();
  TokenTransfersResult success;

  _API_TokenWalletTransfersGet_result__isset __isset;

  void __set_success(const TokenTransfersResult& val);

  bool operator == (const API_TokenWalletTransfersGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokenWalletTransfersGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenWalletTransfersGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenWalletTransfersGet_presult__isset {
  _API_TokenWalletTransfersGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokenWalletTransfersGet_presult__isset;

class API_TokenWalletTransfersGet_presult {
 public:


  virtual ~API_TokenWalletTransfersGet_presult() throw();
  TokenTransfersResult* success;

  _API_TokenWalletTransfersGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokenTransactionsGet_args__isset {
  _API_TokenTransactionsGet_args__isset() : token(false), offset(false), limit(false) {}
  bool token :1;
  bool offset :1;
  bool limit :1;
} _API_TokenTransactionsGet_args__isset;

class API_TokenTransactionsGet_args {
 public:

  API_TokenTransactionsGet_args(const API_TokenTransactionsGet_args&);
  API_TokenTransactionsGet_args(API_TokenTransactionsGet_args&&);
  API_TokenTransactionsGet_args& operator=(const API_TokenTransactionsGet_args&);
  API_TokenTransactionsGet_args& operator=(API_TokenTransactionsGet_args&&);
  API_TokenTransactionsGet_args() : token(), offset(0), limit(0) {
  }

  virtual ~API_TokenTransactionsGet_args() throw();
  Address token;
  int64_t offset;
  int64_t limit;

  _API_TokenTransactionsGet_args__isset __isset;

  void __set_token(const Address& val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_TokenTransactionsGet_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_TokenTransactionsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenTransactionsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokenTransactionsGet_pargs {
 public:


  virtual ~API_TokenTransactionsGet_pargs() throw();
  const Address* token;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenTransactionsGet_result__isset {
  _API_TokenTransactionsGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokenTransactionsGet_result__isset;

class API_TokenTransactionsGet_result {
 public:

  API_TokenTransactionsGet_result(const API_TokenTransactionsGet_result&);
  API_TokenTransactionsGet_result(API_TokenTransactionsGet_result&&);
  API_TokenTransactionsGet_result& operator=(const API_TokenTransactionsGet_result&);
  API_TokenTransactionsGet_result& operator=(API_TokenTransactionsGet_result&&);
  API_TokenTransactionsGet_result() {
  }

  virtual ~API_TokenTransactionsGet_result() throw();
  TokenTransactionsResult success;

  _API_TokenTransactionsGet_result__isset __isset;

  void __set_success(const TokenTransactionsResult& val);

  bool operator == (const API_TokenTransactionsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokenTransactionsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenTransactionsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenTransactionsGet_presult__isset {
  _API_TokenTransactionsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokenTransactionsGet_presult__isset;

class API_TokenTransactionsGet_presult {
 public:


  virtual ~API_TokenTransactionsGet_presult() throw();
  TokenTransactionsResult* success;

  _API_TokenTransactionsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokenInfoGet_args__isset {
  _API_TokenInfoGet_args__isset() : token(false) {}
  bool token :1;
} _API_TokenInfoGet_args__isset;

class API_TokenInfoGet_args {
 public:

  API_TokenInfoGet_args(const API_TokenInfoGet_args&);
  API_TokenInfoGet_args(API_TokenInfoGet_args&&);
  API_TokenInfoGet_args& operator=(const API_TokenInfoGet_args&);
  API_TokenInfoGet_args& operator=(API_TokenInfoGet_args&&);
  API_TokenInfoGet_args() : token() {
  }

  virtual ~API_TokenInfoGet_args() throw();
  Address token;

  _API_TokenInfoGet_args__isset __isset;

  void __set_token(const Address& val);

  bool operator == (const API_TokenInfoGet_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const API_TokenInfoGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenInfoGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokenInfoGet_pargs {
 public:


  virtual ~API_TokenInfoGet_pargs() throw();
  const Address* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenInfoGet_result__isset {
  _API_TokenInfoGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokenInfoGet_result__isset;

class API_TokenInfoGet_result {
 public:

  API_TokenInfoGet_result(const API_TokenInfoGet_result&);
  API_TokenInfoGet_result(API_TokenInfoGet_result&&);
  API_TokenInfoGet_result& operator=(const API_TokenInfoGet_result&);
  API_TokenInfoGet_result& operator=(API_TokenInfoGet_result&&);
  API_TokenInfoGet_result() {
  }

  virtual ~API_TokenInfoGet_result() throw();
  TokenInfoResult success;

  _API_TokenInfoGet_result__isset __isset;

  void __set_success(const TokenInfoResult& val);

  bool operator == (const API_TokenInfoGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokenInfoGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenInfoGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenInfoGet_presult__isset {
  _API_TokenInfoGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokenInfoGet_presult__isset;

class API_TokenInfoGet_presult {
 public:


  virtual ~API_TokenInfoGet_presult() throw();
  TokenInfoResult* success;

  _API_TokenInfoGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokenHoldersGet_args__isset {
  _API_TokenHoldersGet_args__isset() : token(false), offset(false), limit(false), order(false), desc(false) {}
  bool token :1;
  bool offset :1;
  bool limit :1;
  bool order :1;
  bool desc :1;
} _API_TokenHoldersGet_args__isset;

class API_TokenHoldersGet_args {
 public:

  API_TokenHoldersGet_args(const API_TokenHoldersGet_args&);
  API_TokenHoldersGet_args(API_TokenHoldersGet_args&&);
  API_TokenHoldersGet_args& operator=(const API_TokenHoldersGet_args&);
  API_TokenHoldersGet_args& operator=(API_TokenHoldersGet_args&&);
  API_TokenHoldersGet_args() : token(), offset(0), limit(0), order((TokenHoldersSortField)0), desc(0) {
  }

  virtual ~API_TokenHoldersGet_args() throw();
  Address token;
  int64_t offset;
  int64_t limit;
  TokenHoldersSortField order;
  bool desc;

  _API_TokenHoldersGet_args__isset __isset;

  void __set_token(const Address& val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  void __set_order(const TokenHoldersSortField val);

  void __set_desc(const bool val);

  bool operator == (const API_TokenHoldersGet_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(order == rhs.order))
      return false;
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const API_TokenHoldersGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenHoldersGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokenHoldersGet_pargs {
 public:


  virtual ~API_TokenHoldersGet_pargs() throw();
  const Address* token;
  const int64_t* offset;
  const int64_t* limit;
  const TokenHoldersSortField* order;
  const bool* desc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenHoldersGet_result__isset {
  _API_TokenHoldersGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokenHoldersGet_result__isset;

class API_TokenHoldersGet_result {
 public:

  API_TokenHoldersGet_result(const API_TokenHoldersGet_result&);
  API_TokenHoldersGet_result(API_TokenHoldersGet_result&&);
  API_TokenHoldersGet_result& operator=(const API_TokenHoldersGet_result&);
  API_TokenHoldersGet_result& operator=(API_TokenHoldersGet_result&&);
  API_TokenHoldersGet_result() {
  }

  virtual ~API_TokenHoldersGet_result() throw();
  TokenHoldersResult success;

  _API_TokenHoldersGet_result__isset __isset;

  void __set_success(const TokenHoldersResult& val);

  bool operator == (const API_TokenHoldersGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokenHoldersGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokenHoldersGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokenHoldersGet_presult__isset {
  _API_TokenHoldersGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokenHoldersGet_presult__isset;

class API_TokenHoldersGet_presult {
 public:


  virtual ~API_TokenHoldersGet_presult() throw();
  TokenHoldersResult* success;

  _API_TokenHoldersGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TokensListGet_args__isset {
  _API_TokensListGet_args__isset() : offset(false), limit(false), order(false), desc(false) {}
  bool offset :1;
  bool limit :1;
  bool order :1;
  bool desc :1;
} _API_TokensListGet_args__isset;

class API_TokensListGet_args {
 public:

  API_TokensListGet_args(const API_TokensListGet_args&);
  API_TokensListGet_args(API_TokensListGet_args&&);
  API_TokensListGet_args& operator=(const API_TokensListGet_args&);
  API_TokensListGet_args& operator=(API_TokensListGet_args&&);
  API_TokensListGet_args() : offset(0), limit(0), order((TokensListSortField)0), desc(0) {
  }

  virtual ~API_TokensListGet_args() throw();
  int64_t offset;
  int64_t limit;
  TokensListSortField order;
  bool desc;

  _API_TokensListGet_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  void __set_order(const TokensListSortField val);

  void __set_desc(const bool val);

  bool operator == (const API_TokensListGet_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(order == rhs.order))
      return false;
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const API_TokensListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokensListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TokensListGet_pargs {
 public:


  virtual ~API_TokensListGet_pargs() throw();
  const int64_t* offset;
  const int64_t* limit;
  const TokensListSortField* order;
  const bool* desc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokensListGet_result__isset {
  _API_TokensListGet_result__isset() : success(false) {}
  bool success :1;
} _API_TokensListGet_result__isset;

class API_TokensListGet_result {
 public:

  API_TokensListGet_result(const API_TokensListGet_result&);
  API_TokensListGet_result(API_TokensListGet_result&&);
  API_TokensListGet_result& operator=(const API_TokensListGet_result&);
  API_TokensListGet_result& operator=(API_TokensListGet_result&&);
  API_TokensListGet_result() {
  }

  virtual ~API_TokensListGet_result() throw();
  TokensListResult success;

  _API_TokensListGet_result__isset __isset;

  void __set_success(const TokensListResult& val);

  bool operator == (const API_TokensListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TokensListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TokensListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TokensListGet_presult__isset {
  _API_TokensListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TokensListGet_presult__isset;

class API_TokensListGet_presult {
 public:


  virtual ~API_TokensListGet_presult() throw();
  TokensListResult* success;

  _API_TokensListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_WalletsGet_args__isset {
  _API_WalletsGet_args__isset() : offset(false), limit(false), ordCol(false), desc(false) {}
  bool offset :1;
  bool limit :1;
  bool ordCol :1;
  bool desc :1;
} _API_WalletsGet_args__isset;

class API_WalletsGet_args {
 public:

  API_WalletsGet_args(const API_WalletsGet_args&);
  API_WalletsGet_args(API_WalletsGet_args&&);
  API_WalletsGet_args& operator=(const API_WalletsGet_args&);
  API_WalletsGet_args& operator=(API_WalletsGet_args&&);
  API_WalletsGet_args() : offset(0), limit(0), ordCol(0), desc(0) {
  }

  virtual ~API_WalletsGet_args() throw();
  int64_t offset;
  int64_t limit;
  int8_t ordCol;
  bool desc;

  _API_WalletsGet_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  void __set_ordCol(const int8_t val);

  void __set_desc(const bool val);

  bool operator == (const API_WalletsGet_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(ordCol == rhs.ordCol))
      return false;
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const API_WalletsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WalletsGet_pargs {
 public:


  virtual ~API_WalletsGet_pargs() throw();
  const int64_t* offset;
  const int64_t* limit;
  const int8_t* ordCol;
  const bool* desc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletsGet_result__isset {
  _API_WalletsGet_result__isset() : success(false) {}
  bool success :1;
} _API_WalletsGet_result__isset;

class API_WalletsGet_result {
 public:

  API_WalletsGet_result(const API_WalletsGet_result&);
  API_WalletsGet_result(API_WalletsGet_result&&);
  API_WalletsGet_result& operator=(const API_WalletsGet_result&);
  API_WalletsGet_result& operator=(API_WalletsGet_result&&);
  API_WalletsGet_result() {
  }

  virtual ~API_WalletsGet_result() throw();
  WalletsGetResult success;

  _API_WalletsGet_result__isset __isset;

  void __set_success(const WalletsGetResult& val);

  bool operator == (const API_WalletsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WalletsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WalletsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WalletsGet_presult__isset {
  _API_WalletsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_WalletsGet_presult__isset;

class API_WalletsGet_presult {
 public:


  virtual ~API_WalletsGet_presult() throw();
  WalletsGetResult* success;

  _API_WalletsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TrustedGet_args__isset {
  _API_TrustedGet_args__isset() : page(false) {}
  bool page :1;
} _API_TrustedGet_args__isset;

class API_TrustedGet_args {
 public:

  API_TrustedGet_args(const API_TrustedGet_args&);
  API_TrustedGet_args(API_TrustedGet_args&&);
  API_TrustedGet_args& operator=(const API_TrustedGet_args&);
  API_TrustedGet_args& operator=(API_TrustedGet_args&&);
  API_TrustedGet_args() : page(0) {
  }

  virtual ~API_TrustedGet_args() throw();
  int32_t page;

  _API_TrustedGet_args__isset __isset;

  void __set_page(const int32_t val);

  bool operator == (const API_TrustedGet_args & rhs) const
  {
    if (!(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const API_TrustedGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TrustedGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TrustedGet_pargs {
 public:


  virtual ~API_TrustedGet_pargs() throw();
  const int32_t* page;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TrustedGet_result__isset {
  _API_TrustedGet_result__isset() : success(false) {}
  bool success :1;
} _API_TrustedGet_result__isset;

class API_TrustedGet_result {
 public:

  API_TrustedGet_result(const API_TrustedGet_result&);
  API_TrustedGet_result(API_TrustedGet_result&&);
  API_TrustedGet_result& operator=(const API_TrustedGet_result&);
  API_TrustedGet_result& operator=(API_TrustedGet_result&&);
  API_TrustedGet_result() {
  }

  virtual ~API_TrustedGet_result() throw();
  TrustedGetResult success;

  _API_TrustedGet_result__isset __isset;

  void __set_success(const TrustedGetResult& val);

  bool operator == (const API_TrustedGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TrustedGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TrustedGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TrustedGet_presult__isset {
  _API_TrustedGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TrustedGet_presult__isset;

class API_TrustedGet_presult {
 public:


  virtual ~API_TrustedGet_presult() throw();
  TrustedGetResult* success;

  _API_TrustedGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class API_SyncStateGet_args {
 public:

  API_SyncStateGet_args(const API_SyncStateGet_args&);
  API_SyncStateGet_args(API_SyncStateGet_args&&);
  API_SyncStateGet_args& operator=(const API_SyncStateGet_args&);
  API_SyncStateGet_args& operator=(API_SyncStateGet_args&&);
  API_SyncStateGet_args() {
  }

  virtual ~API_SyncStateGet_args() throw();

  bool operator == (const API_SyncStateGet_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const API_SyncStateGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SyncStateGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SyncStateGet_pargs {
 public:


  virtual ~API_SyncStateGet_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SyncStateGet_result__isset {
  _API_SyncStateGet_result__isset() : success(false) {}
  bool success :1;
} _API_SyncStateGet_result__isset;

class API_SyncStateGet_result {
 public:

  API_SyncStateGet_result(const API_SyncStateGet_result&);
  API_SyncStateGet_result(API_SyncStateGet_result&&);
  API_SyncStateGet_result& operator=(const API_SyncStateGet_result&);
  API_SyncStateGet_result& operator=(API_SyncStateGet_result&&);
  API_SyncStateGet_result() {
  }

  virtual ~API_SyncStateGet_result() throw();
  SyncStateResult success;

  _API_SyncStateGet_result__isset __isset;

  void __set_success(const SyncStateResult& val);

  bool operator == (const API_SyncStateGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SyncStateGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SyncStateGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SyncStateGet_presult__isset {
  _API_SyncStateGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SyncStateGet_presult__isset;

class API_SyncStateGet_presult {
 public:


  virtual ~API_SyncStateGet_presult() throw();
  SyncStateResult* success;

  _API_SyncStateGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_GetSeed_args__isset {
  _API_GetSeed_args__isset() : accessId(false) {}
  bool accessId :1;
} _API_GetSeed_args__isset;

class API_GetSeed_args {
 public:

  API_GetSeed_args(const API_GetSeed_args&);
  API_GetSeed_args(API_GetSeed_args&&);
  API_GetSeed_args& operator=(const API_GetSeed_args&);
  API_GetSeed_args& operator=(API_GetSeed_args&&);
  API_GetSeed_args() : accessId(0) {
  }

  virtual ~API_GetSeed_args() throw();
  AccessID accessId;

  _API_GetSeed_args__isset __isset;

  void __set_accessId(const AccessID val);

  bool operator == (const API_GetSeed_args & rhs) const
  {
    if (!(accessId == rhs.accessId))
      return false;
    return true;
  }
  bool operator != (const API_GetSeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_GetSeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_GetSeed_pargs {
 public:


  virtual ~API_GetSeed_pargs() throw();
  const AccessID* accessId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_GetSeed_result__isset {
  _API_GetSeed_result__isset() : success(false) {}
  bool success :1;
} _API_GetSeed_result__isset;

class API_GetSeed_result {
 public:

  API_GetSeed_result(const API_GetSeed_result&);
  API_GetSeed_result(API_GetSeed_result&&);
  API_GetSeed_result& operator=(const API_GetSeed_result&);
  API_GetSeed_result& operator=(API_GetSeed_result&&);
  API_GetSeed_result() {
  }

  virtual ~API_GetSeed_result() throw();
  GetSeedResult success;

  _API_GetSeed_result__isset __isset;

  void __set_success(const GetSeedResult& val);

  bool operator == (const API_GetSeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_GetSeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_GetSeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_GetSeed_presult__isset {
  _API_GetSeed_presult__isset() : success(false) {}
  bool success :1;
} _API_GetSeed_presult__isset;

class API_GetSeed_presult {
 public:


  virtual ~API_GetSeed_presult() throw();
  GetSeedResult* success;

  _API_GetSeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_GetSmartCode_args__isset {
  _API_GetSmartCode_args__isset() : accessId(false), address(false) {}
  bool accessId :1;
  bool address :1;
} _API_GetSmartCode_args__isset;

class API_GetSmartCode_args {
 public:

  API_GetSmartCode_args(const API_GetSmartCode_args&);
  API_GetSmartCode_args(API_GetSmartCode_args&&);
  API_GetSmartCode_args& operator=(const API_GetSmartCode_args&);
  API_GetSmartCode_args& operator=(API_GetSmartCode_args&&);
  API_GetSmartCode_args() : accessId(0), address() {
  }

  virtual ~API_GetSmartCode_args() throw();
  AccessID accessId;
  Address address;

  _API_GetSmartCode_args__isset __isset;

  void __set_accessId(const AccessID val);

  void __set_address(const Address& val);

  bool operator == (const API_GetSmartCode_args & rhs) const
  {
    if (!(accessId == rhs.accessId))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_GetSmartCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_GetSmartCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_GetSmartCode_pargs {
 public:


  virtual ~API_GetSmartCode_pargs() throw();
  const AccessID* accessId;
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_GetSmartCode_result__isset {
  _API_GetSmartCode_result__isset() : success(false) {}
  bool success :1;
} _API_GetSmartCode_result__isset;

class API_GetSmartCode_result {
 public:

  API_GetSmartCode_result(const API_GetSmartCode_result&);
  API_GetSmartCode_result(API_GetSmartCode_result&&);
  API_GetSmartCode_result& operator=(const API_GetSmartCode_result&);
  API_GetSmartCode_result& operator=(API_GetSmartCode_result&&);
  API_GetSmartCode_result() {
  }

  virtual ~API_GetSmartCode_result() throw();
  GetSmartCodeResult success;

  _API_GetSmartCode_result__isset __isset;

  void __set_success(const GetSmartCodeResult& val);

  bool operator == (const API_GetSmartCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_GetSmartCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_GetSmartCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_GetSmartCode_presult__isset {
  _API_GetSmartCode_presult__isset() : success(false) {}
  bool success :1;
} _API_GetSmartCode_presult__isset;

class API_GetSmartCode_presult {
 public:


  virtual ~API_GetSmartCode_presult() throw();
  GetSmartCodeResult* success;

  _API_GetSmartCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class APIClient : virtual public APIIf {
 public:
  APIClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  APIClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void WalletDataGet(WalletDataGetResult& _return, const Address& address);
  void send_WalletDataGet(const Address& address);
  void recv_WalletDataGet(WalletDataGetResult& _return);
  void WalletIdGet(WalletIdGetResult& _return, const Address& address);
  void send_WalletIdGet(const Address& address);
  void recv_WalletIdGet(WalletIdGetResult& _return);
  void WalletTransactionsCountGet(WalletTransactionsCountGetResult& _return, const Address& address);
  void send_WalletTransactionsCountGet(const Address& address);
  void recv_WalletTransactionsCountGet(WalletTransactionsCountGetResult& _return);
  void WalletBalanceGet(WalletBalanceGetResult& _return, const Address& address);
  void send_WalletBalanceGet(const Address& address);
  void recv_WalletBalanceGet(WalletBalanceGetResult& _return);
  void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId);
  void send_TransactionGet(const TransactionId& transactionId);
  void recv_TransactionGet(TransactionGetResult& _return);
  void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit);
  void send_TransactionsGet(const Address& address, const int64_t offset, const int64_t limit);
  void recv_TransactionsGet(TransactionsGetResult& _return);
  void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction);
  void send_TransactionFlow(const Transaction& transaction);
  void recv_TransactionFlow(TransactionFlowResult& _return);
  void TransactionsListGet(TransactionsGetResult& _return, const int64_t offset, const int64_t limit);
  void send_TransactionsListGet(const int64_t offset, const int64_t limit);
  void recv_TransactionsListGet(TransactionsGetResult& _return);
  void GetLastHash(PoolHash& _return);
  void send_GetLastHash();
  void recv_GetLastHash(PoolHash& _return);
  void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit);
  void send_PoolListGetStable(const PoolHash& hash, const int64_t limit);
  void recv_PoolListGetStable(PoolListGetResult& _return);
  void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit);
  void send_PoolListGet(const int64_t offset, const int64_t limit);
  void recv_PoolListGet(PoolListGetResult& _return);
  void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index);
  void send_PoolInfoGet(const PoolHash& hash, const int64_t index);
  void recv_PoolInfoGet(PoolInfoGetResult& _return);
  void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit);
  void send_PoolTransactionsGet(const PoolHash& hash, const int64_t offset, const int64_t limit);
  void recv_PoolTransactionsGet(PoolTransactionsGetResult& _return);
  void StatsGet(StatsGetResult& _return);
  void send_StatsGet();
  void recv_StatsGet(StatsGetResult& _return);
  void SmartContractGet(SmartContractGetResult& _return, const Address& address);
  void send_SmartContractGet(const Address& address);
  void recv_SmartContractGet(SmartContractGetResult& _return);
  void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer);
  void send_SmartContractsListGet(const Address& deployer);
  void recv_SmartContractsListGet(SmartContractsListGetResult& _return);
  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer);
  void send_SmartContractAddressesListGet(const Address& deployer);
  void recv_SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return);
  void WaitForBlock(PoolHash& _return, const PoolHash& obsolete);
  void send_WaitForBlock(const PoolHash& obsolete);
  void recv_WaitForBlock(PoolHash& _return);
  void WaitForSmartTransaction(TransactionId& _return, const Address& smart_public);
  void send_WaitForSmartTransaction(const Address& smart_public);
  void recv_WaitForSmartTransaction(TransactionId& _return);
  void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit);
  void send_SmartContractsAllListGet(const int64_t offset, const int64_t limit);
  void recv_SmartContractsAllListGet(SmartContractsListGetResult& _return);
  void TransactionsStateGet(TransactionsStateGetResult& _return, const Address& address, const std::vector<TransactionInnerId> & id);
  void send_TransactionsStateGet(const Address& address, const std::vector<TransactionInnerId> & id);
  void recv_TransactionsStateGet(TransactionsStateGetResult& _return);
  void ContractAllMethodsGet(ContractAllMethodsGetResult& _return, const std::vector< ::general::ByteCodeObject> & byteCodeObjects);
  void send_ContractAllMethodsGet(const std::vector< ::general::ByteCodeObject> & byteCodeObjects);
  void recv_ContractAllMethodsGet(ContractAllMethodsGetResult& _return);
  void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const TransactionInnerId id);
  void send_SmartMethodParamsGet(const Address& address, const TransactionInnerId id);
  void recv_SmartMethodParamsGet(SmartMethodParamsGetResult& _return);
  void SmartContractDataGet(SmartContractDataResult& _return, const Address& address);
  void send_SmartContractDataGet(const Address& address);
  void recv_SmartContractDataGet(SmartContractDataResult& _return);
  void SmartContractCompile(SmartContractCompileResult& _return, const std::string& sourceCode);
  void send_SmartContractCompile(const std::string& sourceCode);
  void recv_SmartContractCompile(SmartContractCompileResult& _return);
  void TokenBalancesGet(TokenBalancesResult& _return, const Address& address);
  void send_TokenBalancesGet(const Address& address);
  void recv_TokenBalancesGet(TokenBalancesResult& _return);
  void TokenTransfersGet(TokenTransfersResult& _return, const Address& token, const int64_t offset, const int64_t limit);
  void send_TokenTransfersGet(const Address& token, const int64_t offset, const int64_t limit);
  void recv_TokenTransfersGet(TokenTransfersResult& _return);
  void TokenTransferGet(TokenTransfersResult& _return, const Address& token, const TransactionId& id);
  void send_TokenTransferGet(const Address& token, const TransactionId& id);
  void recv_TokenTransferGet(TokenTransfersResult& _return);
  void TokenTransfersListGet(TokenTransfersResult& _return, const int64_t offset, const int64_t limit);
  void send_TokenTransfersListGet(const int64_t offset, const int64_t limit);
  void recv_TokenTransfersListGet(TokenTransfersResult& _return);
  void TokenWalletTransfersGet(TokenTransfersResult& _return, const Address& token, const Address& address, const int64_t offset, const int64_t limit);
  void send_TokenWalletTransfersGet(const Address& token, const Address& address, const int64_t offset, const int64_t limit);
  void recv_TokenWalletTransfersGet(TokenTransfersResult& _return);
  void TokenTransactionsGet(TokenTransactionsResult& _return, const Address& token, const int64_t offset, const int64_t limit);
  void send_TokenTransactionsGet(const Address& token, const int64_t offset, const int64_t limit);
  void recv_TokenTransactionsGet(TokenTransactionsResult& _return);
  void TokenInfoGet(TokenInfoResult& _return, const Address& token);
  void send_TokenInfoGet(const Address& token);
  void recv_TokenInfoGet(TokenInfoResult& _return);
  void TokenHoldersGet(TokenHoldersResult& _return, const Address& token, const int64_t offset, const int64_t limit, const TokenHoldersSortField order, const bool desc);
  void send_TokenHoldersGet(const Address& token, const int64_t offset, const int64_t limit, const TokenHoldersSortField order, const bool desc);
  void recv_TokenHoldersGet(TokenHoldersResult& _return);
  void TokensListGet(TokensListResult& _return, const int64_t offset, const int64_t limit, const TokensListSortField order, const bool desc);
  void send_TokensListGet(const int64_t offset, const int64_t limit, const TokensListSortField order, const bool desc);
  void recv_TokensListGet(TokensListResult& _return);
  void WalletsGet(WalletsGetResult& _return, const int64_t offset, const int64_t limit, const int8_t ordCol, const bool desc);
  void send_WalletsGet(const int64_t offset, const int64_t limit, const int8_t ordCol, const bool desc);
  void recv_WalletsGet(WalletsGetResult& _return);
  void TrustedGet(TrustedGetResult& _return, const int32_t page);
  void send_TrustedGet(const int32_t page);
  void recv_TrustedGet(TrustedGetResult& _return);
  void SyncStateGet(SyncStateResult& _return);
  void send_SyncStateGet();
  void recv_SyncStateGet(SyncStateResult& _return);
  void GetSeed(GetSeedResult& _return, const AccessID accessId);
  void send_GetSeed(const AccessID accessId);
  void recv_GetSeed(GetSeedResult& _return);
  void GetSmartCode(GetSmartCodeResult& _return, const AccessID accessId, const Address& address);
  void send_GetSmartCode(const AccessID accessId, const Address& address);
  void recv_GetSmartCode(GetSmartCodeResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class APIProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<APIIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (APIProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_WalletDataGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WalletIdGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WalletTransactionsCountGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WalletBalanceGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransactionGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransactionsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransactionFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransactionsListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLastHash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PoolListGetStable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PoolListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PoolInfoGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PoolTransactionsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StatsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractsListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractAddressesListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WaitForBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WaitForSmartTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractsAllListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransactionsStateGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ContractAllMethodsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartMethodParamsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractDataGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractCompile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokenBalancesGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokenTransfersGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokenTransferGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokenTransfersListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokenWalletTransfersGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokenTransactionsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokenInfoGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokenHoldersGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TokensListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WalletsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TrustedGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SyncStateGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSmartCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  APIProcessor(::apache::thrift::stdcxx::shared_ptr<APIIf> iface) :
    iface_(iface) {
    processMap_["WalletDataGet"] = &APIProcessor::process_WalletDataGet;
    processMap_["WalletIdGet"] = &APIProcessor::process_WalletIdGet;
    processMap_["WalletTransactionsCountGet"] = &APIProcessor::process_WalletTransactionsCountGet;
    processMap_["WalletBalanceGet"] = &APIProcessor::process_WalletBalanceGet;
    processMap_["TransactionGet"] = &APIProcessor::process_TransactionGet;
    processMap_["TransactionsGet"] = &APIProcessor::process_TransactionsGet;
    processMap_["TransactionFlow"] = &APIProcessor::process_TransactionFlow;
    processMap_["TransactionsListGet"] = &APIProcessor::process_TransactionsListGet;
    processMap_["GetLastHash"] = &APIProcessor::process_GetLastHash;
    processMap_["PoolListGetStable"] = &APIProcessor::process_PoolListGetStable;
    processMap_["PoolListGet"] = &APIProcessor::process_PoolListGet;
    processMap_["PoolInfoGet"] = &APIProcessor::process_PoolInfoGet;
    processMap_["PoolTransactionsGet"] = &APIProcessor::process_PoolTransactionsGet;
    processMap_["StatsGet"] = &APIProcessor::process_StatsGet;
    processMap_["SmartContractGet"] = &APIProcessor::process_SmartContractGet;
    processMap_["SmartContractsListGet"] = &APIProcessor::process_SmartContractsListGet;
    processMap_["SmartContractAddressesListGet"] = &APIProcessor::process_SmartContractAddressesListGet;
    processMap_["WaitForBlock"] = &APIProcessor::process_WaitForBlock;
    processMap_["WaitForSmartTransaction"] = &APIProcessor::process_WaitForSmartTransaction;
    processMap_["SmartContractsAllListGet"] = &APIProcessor::process_SmartContractsAllListGet;
    processMap_["TransactionsStateGet"] = &APIProcessor::process_TransactionsStateGet;
    processMap_["ContractAllMethodsGet"] = &APIProcessor::process_ContractAllMethodsGet;
    processMap_["SmartMethodParamsGet"] = &APIProcessor::process_SmartMethodParamsGet;
    processMap_["SmartContractDataGet"] = &APIProcessor::process_SmartContractDataGet;
    processMap_["SmartContractCompile"] = &APIProcessor::process_SmartContractCompile;
    processMap_["TokenBalancesGet"] = &APIProcessor::process_TokenBalancesGet;
    processMap_["TokenTransfersGet"] = &APIProcessor::process_TokenTransfersGet;
    processMap_["TokenTransferGet"] = &APIProcessor::process_TokenTransferGet;
    processMap_["TokenTransfersListGet"] = &APIProcessor::process_TokenTransfersListGet;
    processMap_["TokenWalletTransfersGet"] = &APIProcessor::process_TokenWalletTransfersGet;
    processMap_["TokenTransactionsGet"] = &APIProcessor::process_TokenTransactionsGet;
    processMap_["TokenInfoGet"] = &APIProcessor::process_TokenInfoGet;
    processMap_["TokenHoldersGet"] = &APIProcessor::process_TokenHoldersGet;
    processMap_["TokensListGet"] = &APIProcessor::process_TokensListGet;
    processMap_["WalletsGet"] = &APIProcessor::process_WalletsGet;
    processMap_["TrustedGet"] = &APIProcessor::process_TrustedGet;
    processMap_["SyncStateGet"] = &APIProcessor::process_SyncStateGet;
    processMap_["GetSeed"] = &APIProcessor::process_GetSeed;
    processMap_["GetSmartCode"] = &APIProcessor::process_GetSmartCode;
  }

  virtual ~APIProcessor() {}
};

class APIProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  APIProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< APIIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< APIIfFactory > handlerFactory_;
};

class APIMultiface : virtual public APIIf {
 public:
  APIMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<APIIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~APIMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<APIIf> > ifaces_;
  APIMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<APIIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void WalletDataGet(WalletDataGetResult& _return, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WalletDataGet(_return, address);
    }
    ifaces_[i]->WalletDataGet(_return, address);
    return;
  }

  void WalletIdGet(WalletIdGetResult& _return, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WalletIdGet(_return, address);
    }
    ifaces_[i]->WalletIdGet(_return, address);
    return;
  }

  void WalletTransactionsCountGet(WalletTransactionsCountGetResult& _return, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WalletTransactionsCountGet(_return, address);
    }
    ifaces_[i]->WalletTransactionsCountGet(_return, address);
    return;
  }

  void WalletBalanceGet(WalletBalanceGetResult& _return, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WalletBalanceGet(_return, address);
    }
    ifaces_[i]->WalletBalanceGet(_return, address);
    return;
  }

  void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransactionGet(_return, transactionId);
    }
    ifaces_[i]->TransactionGet(_return, transactionId);
    return;
  }

  void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransactionsGet(_return, address, offset, limit);
    }
    ifaces_[i]->TransactionsGet(_return, address, offset, limit);
    return;
  }

  void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransactionFlow(_return, transaction);
    }
    ifaces_[i]->TransactionFlow(_return, transaction);
    return;
  }

  void TransactionsListGet(TransactionsGetResult& _return, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransactionsListGet(_return, offset, limit);
    }
    ifaces_[i]->TransactionsListGet(_return, offset, limit);
    return;
  }

  void GetLastHash(PoolHash& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetLastHash(_return);
    }
    ifaces_[i]->GetLastHash(_return);
    return;
  }

  void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PoolListGetStable(_return, hash, limit);
    }
    ifaces_[i]->PoolListGetStable(_return, hash, limit);
    return;
  }

  void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PoolListGet(_return, offset, limit);
    }
    ifaces_[i]->PoolListGet(_return, offset, limit);
    return;
  }

  void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PoolInfoGet(_return, hash, index);
    }
    ifaces_[i]->PoolInfoGet(_return, hash, index);
    return;
  }

  void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PoolTransactionsGet(_return, hash, offset, limit);
    }
    ifaces_[i]->PoolTransactionsGet(_return, hash, offset, limit);
    return;
  }

  void StatsGet(StatsGetResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StatsGet(_return);
    }
    ifaces_[i]->StatsGet(_return);
    return;
  }

  void SmartContractGet(SmartContractGetResult& _return, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractGet(_return, address);
    }
    ifaces_[i]->SmartContractGet(_return, address);
    return;
  }

  void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractsListGet(_return, deployer);
    }
    ifaces_[i]->SmartContractsListGet(_return, deployer);
    return;
  }

  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractAddressesListGet(_return, deployer);
    }
    ifaces_[i]->SmartContractAddressesListGet(_return, deployer);
    return;
  }

  void WaitForBlock(PoolHash& _return, const PoolHash& obsolete) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WaitForBlock(_return, obsolete);
    }
    ifaces_[i]->WaitForBlock(_return, obsolete);
    return;
  }

  void WaitForSmartTransaction(TransactionId& _return, const Address& smart_public) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WaitForSmartTransaction(_return, smart_public);
    }
    ifaces_[i]->WaitForSmartTransaction(_return, smart_public);
    return;
  }

  void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractsAllListGet(_return, offset, limit);
    }
    ifaces_[i]->SmartContractsAllListGet(_return, offset, limit);
    return;
  }

  void TransactionsStateGet(TransactionsStateGetResult& _return, const Address& address, const std::vector<TransactionInnerId> & id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransactionsStateGet(_return, address, id);
    }
    ifaces_[i]->TransactionsStateGet(_return, address, id);
    return;
  }

  void ContractAllMethodsGet(ContractAllMethodsGetResult& _return, const std::vector< ::general::ByteCodeObject> & byteCodeObjects) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ContractAllMethodsGet(_return, byteCodeObjects);
    }
    ifaces_[i]->ContractAllMethodsGet(_return, byteCodeObjects);
    return;
  }

  void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const TransactionInnerId id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartMethodParamsGet(_return, address, id);
    }
    ifaces_[i]->SmartMethodParamsGet(_return, address, id);
    return;
  }

  void SmartContractDataGet(SmartContractDataResult& _return, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractDataGet(_return, address);
    }
    ifaces_[i]->SmartContractDataGet(_return, address);
    return;
  }

  void SmartContractCompile(SmartContractCompileResult& _return, const std::string& sourceCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractCompile(_return, sourceCode);
    }
    ifaces_[i]->SmartContractCompile(_return, sourceCode);
    return;
  }

  void TokenBalancesGet(TokenBalancesResult& _return, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokenBalancesGet(_return, address);
    }
    ifaces_[i]->TokenBalancesGet(_return, address);
    return;
  }

  void TokenTransfersGet(TokenTransfersResult& _return, const Address& token, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokenTransfersGet(_return, token, offset, limit);
    }
    ifaces_[i]->TokenTransfersGet(_return, token, offset, limit);
    return;
  }

  void TokenTransferGet(TokenTransfersResult& _return, const Address& token, const TransactionId& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokenTransferGet(_return, token, id);
    }
    ifaces_[i]->TokenTransferGet(_return, token, id);
    return;
  }

  void TokenTransfersListGet(TokenTransfersResult& _return, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokenTransfersListGet(_return, offset, limit);
    }
    ifaces_[i]->TokenTransfersListGet(_return, offset, limit);
    return;
  }

  void TokenWalletTransfersGet(TokenTransfersResult& _return, const Address& token, const Address& address, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokenWalletTransfersGet(_return, token, address, offset, limit);
    }
    ifaces_[i]->TokenWalletTransfersGet(_return, token, address, offset, limit);
    return;
  }

  void TokenTransactionsGet(TokenTransactionsResult& _return, const Address& token, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokenTransactionsGet(_return, token, offset, limit);
    }
    ifaces_[i]->TokenTransactionsGet(_return, token, offset, limit);
    return;
  }

  void TokenInfoGet(TokenInfoResult& _return, const Address& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokenInfoGet(_return, token);
    }
    ifaces_[i]->TokenInfoGet(_return, token);
    return;
  }

  void TokenHoldersGet(TokenHoldersResult& _return, const Address& token, const int64_t offset, const int64_t limit, const TokenHoldersSortField order, const bool desc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokenHoldersGet(_return, token, offset, limit, order, desc);
    }
    ifaces_[i]->TokenHoldersGet(_return, token, offset, limit, order, desc);
    return;
  }

  void TokensListGet(TokensListResult& _return, const int64_t offset, const int64_t limit, const TokensListSortField order, const bool desc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TokensListGet(_return, offset, limit, order, desc);
    }
    ifaces_[i]->TokensListGet(_return, offset, limit, order, desc);
    return;
  }

  void WalletsGet(WalletsGetResult& _return, const int64_t offset, const int64_t limit, const int8_t ordCol, const bool desc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WalletsGet(_return, offset, limit, ordCol, desc);
    }
    ifaces_[i]->WalletsGet(_return, offset, limit, ordCol, desc);
    return;
  }

  void TrustedGet(TrustedGetResult& _return, const int32_t page) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TrustedGet(_return, page);
    }
    ifaces_[i]->TrustedGet(_return, page);
    return;
  }

  void SyncStateGet(SyncStateResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SyncStateGet(_return);
    }
    ifaces_[i]->SyncStateGet(_return);
    return;
  }

  void GetSeed(GetSeedResult& _return, const AccessID accessId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSeed(_return, accessId);
    }
    ifaces_[i]->GetSeed(_return, accessId);
    return;
  }

  void GetSmartCode(GetSmartCodeResult& _return, const AccessID accessId, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSmartCode(_return, accessId, address);
    }
    ifaces_[i]->GetSmartCode(_return, accessId, address);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class APIConcurrentClient : virtual public APIIf {
 public:
  APIConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  APIConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void WalletDataGet(WalletDataGetResult& _return, const Address& address);
  int32_t send_WalletDataGet(const Address& address);
  void recv_WalletDataGet(WalletDataGetResult& _return, const int32_t seqid);
  void WalletIdGet(WalletIdGetResult& _return, const Address& address);
  int32_t send_WalletIdGet(const Address& address);
  void recv_WalletIdGet(WalletIdGetResult& _return, const int32_t seqid);
  void WalletTransactionsCountGet(WalletTransactionsCountGetResult& _return, const Address& address);
  int32_t send_WalletTransactionsCountGet(const Address& address);
  void recv_WalletTransactionsCountGet(WalletTransactionsCountGetResult& _return, const int32_t seqid);
  void WalletBalanceGet(WalletBalanceGetResult& _return, const Address& address);
  int32_t send_WalletBalanceGet(const Address& address);
  void recv_WalletBalanceGet(WalletBalanceGetResult& _return, const int32_t seqid);
  void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId);
  int32_t send_TransactionGet(const TransactionId& transactionId);
  void recv_TransactionGet(TransactionGetResult& _return, const int32_t seqid);
  void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit);
  int32_t send_TransactionsGet(const Address& address, const int64_t offset, const int64_t limit);
  void recv_TransactionsGet(TransactionsGetResult& _return, const int32_t seqid);
  void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction);
  int32_t send_TransactionFlow(const Transaction& transaction);
  void recv_TransactionFlow(TransactionFlowResult& _return, const int32_t seqid);
  void TransactionsListGet(TransactionsGetResult& _return, const int64_t offset, const int64_t limit);
  int32_t send_TransactionsListGet(const int64_t offset, const int64_t limit);
  void recv_TransactionsListGet(TransactionsGetResult& _return, const int32_t seqid);
  void GetLastHash(PoolHash& _return);
  int32_t send_GetLastHash();
  void recv_GetLastHash(PoolHash& _return, const int32_t seqid);
  void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit);
  int32_t send_PoolListGetStable(const PoolHash& hash, const int64_t limit);
  void recv_PoolListGetStable(PoolListGetResult& _return, const int32_t seqid);
  void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit);
  int32_t send_PoolListGet(const int64_t offset, const int64_t limit);
  void recv_PoolListGet(PoolListGetResult& _return, const int32_t seqid);
  void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index);
  int32_t send_PoolInfoGet(const PoolHash& hash, const int64_t index);
  void recv_PoolInfoGet(PoolInfoGetResult& _return, const int32_t seqid);
  void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit);
  int32_t send_PoolTransactionsGet(const PoolHash& hash, const int64_t offset, const int64_t limit);
  void recv_PoolTransactionsGet(PoolTransactionsGetResult& _return, const int32_t seqid);
  void StatsGet(StatsGetResult& _return);
  int32_t send_StatsGet();
  void recv_StatsGet(StatsGetResult& _return, const int32_t seqid);
  void SmartContractGet(SmartContractGetResult& _return, const Address& address);
  int32_t send_SmartContractGet(const Address& address);
  void recv_SmartContractGet(SmartContractGetResult& _return, const int32_t seqid);
  void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer);
  int32_t send_SmartContractsListGet(const Address& deployer);
  void recv_SmartContractsListGet(SmartContractsListGetResult& _return, const int32_t seqid);
  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer);
  int32_t send_SmartContractAddressesListGet(const Address& deployer);
  void recv_SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const int32_t seqid);
  void WaitForBlock(PoolHash& _return, const PoolHash& obsolete);
  int32_t send_WaitForBlock(const PoolHash& obsolete);
  void recv_WaitForBlock(PoolHash& _return, const int32_t seqid);
  void WaitForSmartTransaction(TransactionId& _return, const Address& smart_public);
  int32_t send_WaitForSmartTransaction(const Address& smart_public);
  void recv_WaitForSmartTransaction(TransactionId& _return, const int32_t seqid);
  void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit);
  int32_t send_SmartContractsAllListGet(const int64_t offset, const int64_t limit);
  void recv_SmartContractsAllListGet(SmartContractsListGetResult& _return, const int32_t seqid);
  void TransactionsStateGet(TransactionsStateGetResult& _return, const Address& address, const std::vector<TransactionInnerId> & id);
  int32_t send_TransactionsStateGet(const Address& address, const std::vector<TransactionInnerId> & id);
  void recv_TransactionsStateGet(TransactionsStateGetResult& _return, const int32_t seqid);
  void ContractAllMethodsGet(ContractAllMethodsGetResult& _return, const std::vector< ::general::ByteCodeObject> & byteCodeObjects);
  int32_t send_ContractAllMethodsGet(const std::vector< ::general::ByteCodeObject> & byteCodeObjects);
  void recv_ContractAllMethodsGet(ContractAllMethodsGetResult& _return, const int32_t seqid);
  void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const TransactionInnerId id);
  int32_t send_SmartMethodParamsGet(const Address& address, const TransactionInnerId id);
  void recv_SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const int32_t seqid);
  void SmartContractDataGet(SmartContractDataResult& _return, const Address& address);
  int32_t send_SmartContractDataGet(const Address& address);
  void recv_SmartContractDataGet(SmartContractDataResult& _return, const int32_t seqid);
  void SmartContractCompile(SmartContractCompileResult& _return, const std::string& sourceCode);
  int32_t send_SmartContractCompile(const std::string& sourceCode);
  void recv_SmartContractCompile(SmartContractCompileResult& _return, const int32_t seqid);
  void TokenBalancesGet(TokenBalancesResult& _return, const Address& address);
  int32_t send_TokenBalancesGet(const Address& address);
  void recv_TokenBalancesGet(TokenBalancesResult& _return, const int32_t seqid);
  void TokenTransfersGet(TokenTransfersResult& _return, const Address& token, const int64_t offset, const int64_t limit);
  int32_t send_TokenTransfersGet(const Address& token, const int64_t offset, const int64_t limit);
  void recv_TokenTransfersGet(TokenTransfersResult& _return, const int32_t seqid);
  void TokenTransferGet(TokenTransfersResult& _return, const Address& token, const TransactionId& id);
  int32_t send_TokenTransferGet(const Address& token, const TransactionId& id);
  void recv_TokenTransferGet(TokenTransfersResult& _return, const int32_t seqid);
  void TokenTransfersListGet(TokenTransfersResult& _return, const int64_t offset, const int64_t limit);
  int32_t send_TokenTransfersListGet(const int64_t offset, const int64_t limit);
  void recv_TokenTransfersListGet(TokenTransfersResult& _return, const int32_t seqid);
  void TokenWalletTransfersGet(TokenTransfersResult& _return, const Address& token, const Address& address, const int64_t offset, const int64_t limit);
  int32_t send_TokenWalletTransfersGet(const Address& token, const Address& address, const int64_t offset, const int64_t limit);
  void recv_TokenWalletTransfersGet(TokenTransfersResult& _return, const int32_t seqid);
  void TokenTransactionsGet(TokenTransactionsResult& _return, const Address& token, const int64_t offset, const int64_t limit);
  int32_t send_TokenTransactionsGet(const Address& token, const int64_t offset, const int64_t limit);
  void recv_TokenTransactionsGet(TokenTransactionsResult& _return, const int32_t seqid);
  void TokenInfoGet(TokenInfoResult& _return, const Address& token);
  int32_t send_TokenInfoGet(const Address& token);
  void recv_TokenInfoGet(TokenInfoResult& _return, const int32_t seqid);
  void TokenHoldersGet(TokenHoldersResult& _return, const Address& token, const int64_t offset, const int64_t limit, const TokenHoldersSortField order, const bool desc);
  int32_t send_TokenHoldersGet(const Address& token, const int64_t offset, const int64_t limit, const TokenHoldersSortField order, const bool desc);
  void recv_TokenHoldersGet(TokenHoldersResult& _return, const int32_t seqid);
  void TokensListGet(TokensListResult& _return, const int64_t offset, const int64_t limit, const TokensListSortField order, const bool desc);
  int32_t send_TokensListGet(const int64_t offset, const int64_t limit, const TokensListSortField order, const bool desc);
  void recv_TokensListGet(TokensListResult& _return, const int32_t seqid);
  void WalletsGet(WalletsGetResult& _return, const int64_t offset, const int64_t limit, const int8_t ordCol, const bool desc);
  int32_t send_WalletsGet(const int64_t offset, const int64_t limit, const int8_t ordCol, const bool desc);
  void recv_WalletsGet(WalletsGetResult& _return, const int32_t seqid);
  void TrustedGet(TrustedGetResult& _return, const int32_t page);
  int32_t send_TrustedGet(const int32_t page);
  void recv_TrustedGet(TrustedGetResult& _return, const int32_t seqid);
  void SyncStateGet(SyncStateResult& _return);
  int32_t send_SyncStateGet();
  void recv_SyncStateGet(SyncStateResult& _return, const int32_t seqid);
  void GetSeed(GetSeedResult& _return, const AccessID accessId);
  int32_t send_GetSeed(const AccessID accessId);
  void recv_GetSeed(GetSeedResult& _return, const int32_t seqid);
  void GetSmartCode(GetSmartCodeResult& _return, const AccessID accessId, const Address& address);
  int32_t send_GetSmartCode(const AccessID accessId, const Address& address);
  void recv_GetSmartCode(GetSmartCodeResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
